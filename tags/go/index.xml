<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Varun Kumar</title>
    <link>https://varunksaini.com/tags/go/</link>
    <description>Recent content in Go on Varun Kumar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Aug 2022 09:57:54 -0500</lastBuildDate><atom:link href="https://varunksaini.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reviewing Network Programming With Go by Adam Woodbeck</title>
      <link>https://varunksaini.com/network-programming-with-go/</link>
      <pubDate>Thu, 25 Aug 2022 09:57:54 -0500</pubDate>
      
      <guid>https://varunksaini.com/network-programming-with-go/</guid>
      <description>A good primer on how to write network programs using Go programming language. Author starts by talking about TCP/IP, UDP, and other networking stuff. Once the basic theory is out of way, author builds network services using TCP and UDP. In later chapters, author talks about deployment, cloud, and observability for services.
Overall, I liked this book a lot and learned a few things too. Writing style is very approachable and fun.</description>
    </item>
    
    <item>
      <title>Using Wasm in Envoy Proxy - Part 1</title>
      <link>https://varunksaini.com/wasm-http-proxy-part-1/</link>
      <pubDate>Thu, 03 Jun 2021 13:21:32 -0500</pubDate>
      
      <guid>https://varunksaini.com/wasm-http-proxy-part-1/</guid>
      <description>This is my first blog about using Wasm(Web Assembly) with http proxies at edge. In this first post, we are using tinyGo to compile go code to Wasm. In future posts, I am going to use C++ and Rust, and then talk about pros and cons of these approaches.
What is WASM According to webassembly website,
 WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</description>
    </item>
    
    <item>
      <title>Auto Instrumenting a Go server using Open Telemetry</title>
      <link>https://varunksaini.com/auto-instrument-open-telemetry-go/</link>
      <pubDate>Sun, 16 May 2021 16:20:44 -0500</pubDate>
      
      <guid>https://varunksaini.com/auto-instrument-open-telemetry-go/</guid>
      <description>OpenTelemetry is an observability framework â€“ an API, SDK, and tools that are designed to aid in the generation and collection of application telemetry data such as metrics, logs, and traces.
There are 2 ways to instrument a Go application.
 Manual Instrumentation Auto Instrumentation  Instrumenting an application generally involves a significant manual effort on developer part. Open Telemetry for Go(and many other popular languages) supports auto instrumentation using wrappers and helper functions around many popular frameworks and libraries in Go programming languages.</description>
    </item>
    
    <item>
      <title>A simple tiered Cache in Go</title>
      <link>https://varunksaini.com/tiered-cache-in-go/</link>
      <pubDate>Sun, 09 May 2021 06:18:37 -0500</pubDate>
      
      <guid>https://varunksaini.com/tiered-cache-in-go/</guid>
      <description>What is Cache? A cache is used to store data or files for faster access. A cache can be a hardware or software component. Data stored in a cache might be the result of an earlier computation or a copy of data stored elsewhere.
A cache hit occurs when the requested data can be found in a cache, while a cache miss occurs when data can not be found in cache.</description>
    </item>
    
    <item>
      <title>Go Modules Meetup Talk</title>
      <link>https://varunksaini.com/go-modules-meetup-talk/</link>
      <pubDate>Sun, 18 Apr 2021 07:14:06 -0500</pubDate>
      
      <guid>https://varunksaini.com/go-modules-meetup-talk/</guid>
      <description>I go a chance to speak at Go Banglore meetup recently. My talk was about how we moved from custom dependecy management to go modules at work.
Go at Walmart  Go is used at edge and many other places in Walmart Edge Foundation - CDN and Proxies There are more than 400 repositories in our github organization  Quirks before go modules  Most of code in one single repo Module incompatible import paths(&amp;ldquo;torbit/foo) Big utilities packages that are shared around teams Forks of popular open source repositories Mix of monorepo and multi-repo  Custom dependency manager tool - tbget  Clone repository locally Run tbget .</description>
    </item>
    
    <item>
      <title>Can we use slice as Map Keys in Go</title>
      <link>https://varunksaini.com/slice-as-map-keys-in-go/</link>
      <pubDate>Thu, 01 Apr 2021 06:39:37 -0500</pubDate>
      
      <guid>https://varunksaini.com/slice-as-map-keys-in-go/</guid>
      <description>Question: Can we use slice as map key in Go? Short answer is No
Do you want to know more? Okay, Let&amp;rsquo;s have a look at spec.
From Map spec:
 The comparison operators == and != must be fully defined for operands of the key type; thus the key type must not be a function, map, or slice.
 Map spec already tells us that slice can&amp;rsquo;t be a key, but we can also check it in the comparison spec:</description>
    </item>
    
    <item>
      <title>How to make VScode Go work in a Multi-Module Repo</title>
      <link>https://varunksaini.com/vscode-multimodule-repo/</link>
      <pubDate>Sat, 06 Feb 2021 15:02:43 -0600</pubDate>
      
      <guid>https://varunksaini.com/vscode-multimodule-repo/</guid>
      <description>At work, We have a multi-module(nested go modules) repo and VSCode is always having problem with that. I was chatting with gopls team on slack and came to know about a new feature that helps with multi-module and VSCode + Go.
There are 2 ways to fix this issue in VSCode Go extension -
Multiple modules if you have multiple modules or nested modules in a single repo, you will need to create a &amp;ldquo;workspace folder&amp;rdquo; for each module.</description>
    </item>
    
    <item>
      <title>writing files completely to disk in go</title>
      <link>https://varunksaini.com/write-file-completely-to-disk-in-go/</link>
      <pubDate>Tue, 27 Jun 2017 08:01:00 -0500</pubDate>
      
      <guid>https://varunksaini.com/write-file-completely-to-disk-in-go/</guid>
      <description>When we write a file, how we make sure that file is written completely to disk. One of the way is write a temporary file first and then rename it, rename operation is atomic, so we get a complete file.
tempFile, err := ioutil.TempFile(path, name) if err != nil { return err } defer tempFile.Close() tempname := tempFile.Name() defer os.Remove(tempname) //Write to temp file err = os.Rename(tempname, filename) if err !</description>
    </item>
    
    <item>
      <title>backoff and  retry in go</title>
      <link>https://varunksaini.com/backoff-retry-in-golang/</link>
      <pubDate>Sun, 16 Apr 2017 08:01:00 -0500</pubDate>
      
      <guid>https://varunksaini.com/backoff-retry-in-golang/</guid>
      <description>Failure is a way of life. Requests(http or others..) can fail for many reasons. Decision to stop or retry can be very critical for applications. backoff algorithms provide a way to backoff and retry on a failure. There are two popular methods to backoff, constant backoff and exponential backoff.
I use backoff library, which is a Go port of exponential backoff algorithm from Google&amp;rsquo;s HTTP Client Library for Java.
backoff provides 4 main functionalities.</description>
    </item>
    
  </channel>
</rss>
