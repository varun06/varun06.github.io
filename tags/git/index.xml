<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Varun Saini</title>
    <link>https://varunksaini.com/tags/git/index.xml</link>
    <description>Recent content in Git on Varun Saini</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://varunksaini.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>remove big file from git repo</title>
      <link>https://varunksaini.com/blog/remove-big-file-from-git-repo/</link>
      <pubDate>Sat, 22 Oct 2016 07:35:43 -0500</pubDate>
      
      <guid>https://varunksaini.com/blog/remove-big-file-from-git-repo/</guid>
      <description>&lt;p&gt;Sometimes you push a big binary/text(etc.) file to your git repo and these files stay in your git history. Your repo size go to roof and it takes time to clone that repo, which is a big pain. One of my git repo at work had a big binary(logstash deb file) in history and it was inflating the repo size to over 80mb. So I thought of cleaning the repo and bring down the size. I am sure there are many ways to do it but I am going to write down what I did so somebody else can also benefit.&lt;/p&gt;

&lt;p&gt;I used a tool called &lt;strong&gt;BFG Repo cleaner&lt;/strong&gt;. BFG cleans bad data from git repo. BFG can be downloaded &lt;a href=&#34;http://repo1.maven.org/maven2/com/madgag/bfg/1.12.13/bfg-1.12.13.jar&#34;&gt;here&lt;/a&gt; and provides a comprehensive list of option to clean git repo. It is an alternative to &lt;code&gt;git-filter-branch&lt;/code&gt;, which I have no idea about.&lt;/p&gt;

&lt;p&gt;To use BFG on a git repo follow these steps:&lt;/p&gt;

&lt;p&gt;First clone a fresh copy of your repo, using the &lt;code&gt;--mirror&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone --mirror git://github.com/big-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the BFG to clean any big file that has a size greater then 100mb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -jar bfg.jar --strip-blobs-bigger-than 100M big-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you know the name of file, you can give the name too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -jar bfg.jar --delete-files file_name  big-repo.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After running the command above, BFG will update your commits and all branches and tags so they are clean, but it doesn&amp;rsquo;t physically delete the unwanted stuff. Examine the repo to make sure your history has been updated, and then use the standard &lt;code&gt;git gc&lt;/code&gt; command to strip out the unwanted dirty data, which Git will now recognise as surplus to requirements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd big-repo 
$ git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now --aggressive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, once you&amp;rsquo;re happy with the updated state of your repo, push it back up (note that because your clone command used the &lt;code&gt;--mirror&lt;/code&gt; flag, this push will update all refs on your remote server):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you push new and clean history to your repo, ditch old copies of the repo and then fresh clone/fork. Delete the old clones as they have dirty history, if you have some PR&amp;rsquo;s, fetch them from master or cherry pick the commits you want.&lt;/p&gt;

&lt;p&gt;After all these your repo size should be significantly lower. In my case, I brought the size down from 82mb to 4.1mb.&lt;/p&gt;

&lt;p&gt;Let me know if you have any question or suggestions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>