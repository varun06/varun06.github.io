<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Varun Saini</title>
    <link>https://varunksaini.com/tags/golang/</link>
    <description>Recent content in Golang on Varun Saini</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 29 Jun 2017 21:10:59 -0500</lastBuildDate>
    
	<atom:link href="https://varunksaini.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>running a single test multiple times in golang</title>
      <link>https://varunksaini.com/blog/run-go-test-multiple-times/</link>
      <pubDate>Thu, 29 Jun 2017 21:10:59 -0500</pubDate>
      
      <guid>https://varunksaini.com/blog/run-go-test-multiple-times/</guid>
      <description>go provides a great standard library for testing. To test a function/method, just create name_test.go in same package and write you tests.
Go also provides go test tool to run the tests in a package. running go test in a package runs all the tests in that package and go test -run &amp;lt;testname&amp;gt; runs only given test.
But what if you want to run test multiple times, go test to rescue,</description>
    </item>
    
    <item>
      <title>question about type assertion in go</title>
      <link>https://varunksaini.com/blog/question-about-type-assertion/</link>
      <pubDate>Wed, 23 Nov 2016 09:47:56 -0600</pubDate>
      
      <guid>https://varunksaini.com/blog/question-about-type-assertion/</guid>
      <description>One of our go app crashed recently because of a bug in https://github.com/urfave/cli/, here is the PR with fix from my collegue who found the issue. Then we started talking about it internally and found something that&amp;rsquo;s interesting. I understand some of it but not fully so I thought of asking people who might know.
My question is why bar works but not foo.
package main import ( &amp;quot;fmt&amp;quot; ) func main() { var f interface{} var b interface{} f = foo() b = bar() if _, ok := f.</description>
    </item>
    
    <item>
      <title>Using if condition in a defer statement</title>
      <link>https://varunksaini.com/blog/using-if-in-defer/</link>
      <pubDate>Tue, 01 Nov 2016 21:10:59 -0500</pubDate>
      
      <guid>https://varunksaini.com/blog/using-if-in-defer/</guid>
      <description>defer statement is used to do basic cleanup in go, deferred calls are executed when surrounding function returns.
f, err := os.Open(fileName) if err != nil { return } defer src.Close()  We open a file and then use defer to close the file handle. Using defer makes sure that file handle is closed and we don&amp;rsquo;t have any bug in our code.But what if we want to make a decision(conditional) in defer, is that possible?</description>
    </item>
    
    <item>
      <title>how not to handle errors in golang</title>
      <link>https://varunksaini.com/blog/how-not-to-handle-errors-in-golang/</link>
      <pubDate>Thu, 27 Oct 2016 10:40:33 -0500</pubDate>
      
      <guid>https://varunksaini.com/blog/how-not-to-handle-errors-in-golang/</guid>
      <description>People have a love and hate relationship with golang error handling. Golang&amp;rsquo;s use to return values for error handling seems to have as many detractors as admirers. In golang, errors are of immediate interest, so you handle them then and there, so it very common to see code like this -
var user User err := json.Marshal(data, &amp;amp;user) if err != nil { return err }  In a large code base, you see if err !</description>
    </item>
    
  </channel>
</rss>