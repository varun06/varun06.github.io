<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Never stop learning...</title>
    <link>https://varunksaini.com/tags/question/index.xml</link>
    <description>Recent content on Never stop learning...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://varunksaini.com/tags/question/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>what do you learn from technical videos</title>
      <link>https://varunksaini.com/posts/what-do-you-learn-from-technical-vidoes/</link>
      <pubDate>Wed, 07 Dec 2016 12:15:46 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/what-do-you-learn-from-technical-vidoes/</guid>
      <description>&lt;p&gt;I watch many technical videos but I feel that I don&amp;rsquo;t learn much from the technical videos. I have tried some techniques but nothing has worked as much as I want. That&amp;rsquo;s why I thoguht of asking, What and how people learn from technical videos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>question about type assertion in go</title>
      <link>https://varunksaini.com/posts/question-about-type-assertion/</link>
      <pubDate>Wed, 23 Nov 2016 09:47:56 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/question-about-type-assertion/</guid>
      <description>&lt;p&gt;One of our go app crashed recently because of a bug in &lt;a href=&#34;https://github.com/urfave/cli/&#34;&gt;https://github.com/urfave/cli/&lt;/a&gt;, here is the &lt;a href=&#34;https://github.com/urfave/cli/pull/568&#34;&gt;PR&lt;/a&gt; with fix from my collegue who found the issue. Then we started talking about it internally and found something that&amp;rsquo;s interesting. I understand some of it but not fully so I thought of asking people who might know.&lt;/p&gt;

&lt;p&gt;My question is why &lt;code&gt;bar&lt;/code&gt; works but not &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

func main() {
	var f interface{}
	var b interface{}
	f = foo()
	b = bar()

	if _, ok := f.(func(string) error); ok {
		fmt.Println(&amp;quot;FOUND IT&amp;quot;)
	} else {
		fmt.Println(&amp;quot;DIDNT FIND IT&amp;quot;)
	}

	if _, ok := b.(func(string) error); ok {
		fmt.Println(&amp;quot;FOUND IT&amp;quot;)
	} else {
		fmt.Println(&amp;quot;DIDNT FIND IT&amp;quot;)
	}
}

type FooFunc func(string) error

func foo() func(string) error {
	return func(e string) error {
		return fmt.Errorf(&amp;quot;GOTCHA&amp;quot;)
	}
}

func bar() FooFunc {
	return func(e string) error {
		return fmt.Errorf(&amp;quot;GOTCHA&amp;quot;)
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/4EfYIMZV-p&#34;&gt;go playground&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>