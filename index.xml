<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>keep living, keep learning..</title>
    <link>http://varunksaini.com/</link>
    <description>Recent content on keep living, keep learning..</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Copyright Text</copyright>
    <lastBuildDate>Sun, 29 May 2016 08:38:58 -0500</lastBuildDate>
    <atom:link href="http://varunksaini.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>weekly reading 29May</title>
      <link>http://varunksaini.com/weekly-reading-29May/</link>
      <pubDate>Sun, 29 May 2016 08:38:58 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-29May/</guid>
      <description>&lt;p&gt;This week I read more technical articles then general articles. Also I spent more time reading my kindle books. I am reading two books &lt;a href=&#34;https://www.amazon.com/gp/product/B00PWX7RPG&#34;&gt;Rise of the Robots: Technology and the Threat of a Jobless Future&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/evolution-Phoenix-Horizon-Book-ebook/dp/B00OM9OKEC&#34;&gt;Revolution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/23/java-garbage-collection-can-be-really-slow/&#34;&gt;http://jvns.ca/blog/2016/04/23/java-garbage-collection-can-be-really-slow/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/25/how-regular-expressions-go-fast/&#34;&gt;http://jvns.ca/blog/2016/04/25/how-regular-expressions-go-fast/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/30/cdns-arent-just-for-caching/&#34;&gt;http://jvns.ca/blog/2016/04/30/cdns-arent-just-for-caching/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/event-streams-kafka&#34;&gt;https://www.infoq.com/presentations/event-streams-kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linkedin.com/blog/2016/05/introducing-and-open-sourcing-ambry---linkedins-new-distributed-&#34;&gt;https://engineering.linkedin.com/blog/2016/05/introducing-and-open-sourcing-ambry---linkedins-new-distributed-&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://antirez.com/news/107&#34;&gt;http://antirez.com/news/107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/2016/open-sourcing-twitter-heron&#34;&gt;https://blog.twitter.com/2016/open-sourcing-twitter-heron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.nullspace.io/building-search-engines.html&#34;&gt;http://blog.nullspace.io/building-search-engines.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devblog.mediamath.com/cassandra-war-stories-part-1&#34;&gt;http://devblog.mediamath.com/cassandra-war-stories-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/blog/its-the-future/&#34;&gt;https://circleci.com/blog/its-the-future/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.mozhu.info/vimmers-you-dont-need-nerdtree-18f627b561c3#.2ag3f2axr&#34;&gt;https://blog.mozhu.info/vimmers-you-dont-need-nerdtree-18f627b561c3#.2ag3f2axr&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.troyhunt.com/going-dark-online-privacy-and-anonymity-for-normal-people/&#34;&gt;https://www.troyhunt.com/going-dark-online-privacy-and-anonymity-for-normal-people/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/05/22/how-do-you-write-blog-posts/&#34;&gt;http://jvns.ca/blog/2016/05/22/how-do-you-write-blog-posts/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>pretty print JSON in golang</title>
      <link>http://varunksaini.com/pretty-print-json-golang/</link>
      <pubDate>Sun, 22 May 2016 06:52:53 -0500</pubDate>
      
      <guid>http://varunksaini.com/pretty-print-json-golang/</guid>
      <description>&lt;p&gt;JSON is a very common standard to transmit data objects. &lt;a href=&#34;https://golang.org&#34;&gt;go&lt;/a&gt; provides great support for JSON. &lt;a href=&#34;https://golang.org/pkg/encoding/JSON/&#34;&gt;JSON package&lt;/a&gt; in standard library provides the methods to work with JSON in a go program. Generally we use JSON to tranmit the data but sometime we need to print the JSON data too. If a human eye is going to look at that data, it is a good idea to pretty print that JSON. Here is small function that will do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func prettyPrintJSON(b []byte) ([]byte, error) {
	var out bytes.Buffer
	err := JSON.Indent(&amp;amp;out, b, &amp;quot;&amp;quot;, &amp;quot;    &amp;quot;)
	return out.Bytes(), err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function takes a byte array and indent the JSON. Each element in JSON object begins on a new line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 22 May</title>
      <link>http://varunksaini.com/weekly-reading-22May/</link>
      <pubDate>Sun, 22 May 2016 06:20:37 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-22May/</guid>
      <description>&lt;p&gt;This week again I read more that 20 articles. I have a good mix of long form reading and quick reading articles. I read way more general(Science, Society etc.) compare to technical articles. Again Pocket app was handy to keep the articles saved for me.This logging has helped me in finding that I am reading a lot of stuff. I also have some books to read, so I might not read these many articles going forward and finish my books first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/how-going-to-mars-can-pave-the-way-to-saving-the-earth&#34;&gt;https://aeon.co/essays/how-going-to-mars-can-pave-the-way-to-saving-the-earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theguardian.com/technology/2016/may/12/facebook-free-basics-india-zuckerberg&#34;&gt;https://www.theguardian.com/technology/2016/may/12/facebook-free-basics-india-zuckerberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bbc.co.uk/news/magazine-27186709&#34;&gt;http://www.bbc.co.uk/news/magazine-27186709&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.1843magazine.com/culture/the-daily/how-taxi-driver-ruined-acting&#34;&gt;https://www.1843magazine.com/culture/the-daily/how-taxi-driver-ruined-acting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://usesthis.com/interviews/kirby.ferguson/&#34;&gt;https://usesthis.com/interviews/kirby.ferguson/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&#34;&gt;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatesnotes.com/Books/Seveneves&#34;&gt;https://www.gatesnotes.com/Books/Seveneves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qz.com/685852/hookup-culture/&#34;&gt;http://qz.com/685852/hookup-culture/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/why-decriminalising-sex-work-is-better-for-everyone&#34;&gt;https://aeon.co/opinions/why-decriminalising-sex-work-is-better-for-everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/why-watching-people-take-selfies-feels-so-awkward&#34;&gt;https://aeon.co/opinions/why-watching-people-take-selfies-feels-so-awkward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/the-golden-age-of-x86-gaming/&#34;&gt;https://blog.codinghorror.com/the-golden-age-of-x86-gaming/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://m.signalvnoise.com/eat-sleep-code-repeat-is-such-bullshit-c2a4d9beaaf5#.iw36jfax2&#34;&gt;https://m.signalvnoise.com/eat-sleep-code-repeat-is-such-bullshit-c2a4d9beaaf5#.iw36jfax2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tristanharris/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3#.v1vinnk58&#34;&gt;https://medium.com/@tristanharris/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3#.v1vinnk58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/05/19/a-few-reasons-to-be-skeptical-of-machine-learning-results/&#34;&gt;http://jvns.ca/blog/2016/05/19/a-few-reasons-to-be-skeptical-of-machine-learning-results/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wired.com/2016/05/maksym-igor-popov-fbi/&#34;&gt;https://www.wired.com/2016/05/maksym-igor-popov-fbi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.theatlantic.com/entertainment/archive/2016/05/the-future-is-almost-now/482718/&#34;&gt;http://www.theatlantic.com/entertainment/archive/2016/05/the-future-is-almost-now/482718/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/your-brain-does-not-process-information-and-it-is-not-a-computer&#34;&gt;https://aeon.co/essays/your-brain-does-not-process-information-and-it-is-not-a-computer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Technical Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/podcast-matt-ranney&#34;&gt;https://www.infoq.com/articles/podcast-matt-ranney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://karla.io/2016/04/30/ssh-for-fun-and-profit.html&#34;&gt;https://karla.io/2016/04/30/ssh-for-fun-and-profit.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/study/tcpdump/&#34;&gt;https://danielmiessler.com/study/tcpdump/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeanyi.co/posts/understanding-consensus/&#34;&gt;http://ifeanyi.co/posts/understanding-consensus/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://go-talks.appspot.com/github.com/mkevac/golangmoscow2016/gomeetup.slide&#34;&gt;http://go-talks.appspot.com/github.com/mkevac/golangmoscow2016/gomeetup.slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=N3PWzBeLX2M&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=N3PWzBeLX2M&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 15May</title>
      <link>http://varunksaini.com/weekly-reading-15May/</link>
      <pubDate>Sun, 15 May 2016 08:43:02 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-15May/</guid>
      <description>&lt;p&gt;I love reading and read a lot. Mostly my reading is on topics related to programming, science, and social science. When I find an article worth reading I use (pocket)[&lt;a href=&#34;https://getpocket.com&#34;&gt;https://getpocket.com&lt;/a&gt;] to store the article. Once I have 5-10 articles to read, I read them and then share them to twitter or facebook. Most of the reading happen on weekends and I also read some books too. Today morning I thought to start this section on my blog so that if someone find these articles enticing, they can also get the link to read them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://davidad.github.io/blog/2014/03/12/the-operating-system-is-out-of-date/&#34;&gt;http://davidad.github.io/blog/2014/03/12/the-operating-system-is-out-of-date/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://priceonomics.com/online-dating-and-the-death-of-the-mixed/&#34;&gt;http://priceonomics.com/online-dating-and-the-death-of-the-mixed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/how-game-theory-can-help-you-do-a-better-job-of-parenting&#34;&gt;https://aeon.co/opinions/how-game-theory-can-help-you-do-a-better-job-of-parenting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698652-europe-and-america-made-mistakes-misery-arab-world-caused-mainly-its-own&#34;&gt;http://www.economist.com/news/leaders/21698652-europe-and-america-made-mistakes-misery-arab-world-caused-mainly-its-own&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.thington.com/the-shape-of-things-66c1a8e9d606#.bt0gjz1vg&#34;&gt;https://blog.thington.com/the-shape-of-things-66c1a8e9d606#.bt0gjz1vg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/true-ai-is-both-logically-possible-and-utterly-implausible&#34;&gt;https://aeon.co/essays/true-ai-is-both-logically-possible-and-utterly-implausible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nautil.us/issue/36/aging/physics-makes-aging-inevitable-not-biology&#34;&gt;http://nautil.us/issue/36/aging/physics-makes-aging-inevitable-not-biology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hanselman.com/blog/10YearsAndOver520EpisodesOfPodcastingTechIsAMarathonNotASprint.aspx&#34;&gt;http://www.hanselman.com/blog/10YearsAndOver520EpisodesOfPodcastingTechIsAMarathonNotASprint.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nymag.com/scienceofus/2016/05/half-of-your-friends-probably-dont-think-of-you-as-a-friend.html&#34;&gt;http://nymag.com/scienceofus/2016/05/half-of-your-friends-probably-dont-think-of-you-as-a-friend.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&#34;&gt;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>unmarshal to map</title>
      <link>http://varunksaini.com/unmarshal-to-map/</link>
      <pubDate>Sun, 13 Mar 2016 07:57:24 -0500</pubDate>
      
      <guid>http://varunksaini.com/unmarshal-to-map/</guid>
      <description>&lt;p&gt;When you unmarhsal json to a map, always pass the reference to map object. This is very subtle and I fixed two bugs last week related to same thing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var m map[string]string
err := json.Unmarshal(data, m)
if err != nil {
	return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code snippet above will not fail/err. But when you look at m, you will get nothing. To fix this, we need to pass the reference to m in &lt;code&gt;json.Unmarshal&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var m map[string]string
err := json.Unmarshal(data, &amp;amp;m)
if err != nil {
	return err
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>do we need so many data scientists</title>
      <link>http://varunksaini.com/do-we-need-so-many-data-scientists/</link>
      <pubDate>Sat, 20 Feb 2016 06:57:49 -0600</pubDate>
      
      <guid>http://varunksaini.com/do-we-need-so-many-data-scientists/</guid>
      <description>&lt;p&gt;Hiring is a difficult problem to solve(&lt;a href=&#34;http://www.theatlantic.com/business/archive/2013/06/why-is-it-so-hard-to-hire-great-people/277122/&#34;&gt;http://www.theatlantic.com/business/archive/2013/06/why-is-it-so-hard-to-hire-great-people/277122/&lt;/a&gt;). Career fairs are a good way to meet college graduates who are looking for internship or full time opportunities. I have been to many career fairs and we found some really good engineers(some of them are my colleagues) there. But some time back I noticed that there are lots of students looking for data science or data analysts roles(both internship or full time). Even this year, I have been to two career fairs and I am amazed how many students wants to be data scientists or data analysts. I asked many current students why they want to be a data scientist or some time even &amp;ldquo;What is data science&amp;rdquo; but most of the time they don&amp;rsquo;t know.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know what is the reason and that&amp;rsquo;s why I thought of asking smart people&amp;hellip;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>https server in go</title>
      <link>http://varunksaini.com/https-server-in-go/</link>
      <pubDate>Mon, 25 Jan 2016 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/https-server-in-go/</guid>
      <description>&lt;p&gt;We organized &lt;a href=&#34;http://www.meetup.com/Chicago-Hardcore-Golang/events/226752090/&#34;&gt;Golang meetup&lt;/a&gt; in &lt;a href=&#34;http://mediamath.com&#34;&gt;MediaMath&lt;/a&gt; Chicago on 25th january. It was my first meetup talk and I gave a talk on writing secure servers in Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://go-talks.appspot.com/github.com/varun06/gomeetup/httpsandgo.slide#1&#34;&gt;https server in go&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Review: The Go Programming language</title>
      <link>http://varunksaini.com/the-Go-Programming-language-book-review/</link>
      <pubDate>Sat, 12 Dec 2015 19:59:32 -0600</pubDate>
      
      <guid>http://varunksaini.com/the-Go-Programming-language-book-review/</guid>
      <description>&lt;p&gt;I have been programming in Go from almost one year. I read &lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;, went through &lt;a href=&#34;https://tour.golang.org/welcome/1&#34;&gt;A Tour of Go&lt;/a&gt; and looked at &lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt; many times. But when it was announced that Alan Donovan and Brian Kernighan are writing a book &lt;a href=&#34;http://www.gopl.io/&#34;&gt;The Go Programming Language&lt;/a&gt; on Go, I didn&amp;rsquo;t think much and pre-ordered the book on &lt;a href=&#34;http://www.amazon.com/dp/0134190440&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I received the book on October 20, 2015 and started reading it immediately. I finished the book recently and writing a concise review of the book below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who is the book for:&lt;/strong&gt; Authors assume that reader has some programming experience in one or more dynamic or compiled languages, such as C, C++, Java, python, ruby etc. as far as Go language knowledge goes, they assume that you are new to Go. But that does not mean experienced programmers can not get any thing from this book. I have been programming in Go from almost one year and I also found many trick and areas to improve(that shows how experienced in Go I am..).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Organization of the book:&lt;/strong&gt; Book has 13 chapters about basic data types, functions, methods, interface and concurrency in Go. Last chapter of book is about doing low level programming in Go using unsafe package.Every chapter has theory, code examples and code exercises about the corresponding topic. First chapter is &lt;strong&gt;Tutorial&lt;/strong&gt; and basically is a tour of basic components of Go programming language, such as command line applications,  http server, working with images etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code samples and exercises:&lt;/strong&gt; This book certainly has some really well thought out code samples and code exercises. Code samples has a normal progression through out the book. Code exercises are also sometime related to sample code (adding new features, enhancing existing code) and sometime writing something new to fully grasp the concept. All the code examples are provided at book source code repository for download. Code exercises need to be done by reader as part of learning process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final thoughts:&lt;/strong&gt; A must have book for Go programmers. Specially who are just starting. Experienced programmers can use the book for reference and bragging rights.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issue with white space in json struct tags</title>
      <link>http://varunksaini.com/json-tag-in-struct-gotcha/</link>
      <pubDate>Mon, 19 Oct 2015 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/json-tag-in-struct-gotcha/</guid>
      <description>&lt;p&gt;Go requires all exported fields to start with a capitalized letter. But It is not common for JSON where lower case letter keys are preferred. We can solve this problem by using the struct tags for json.&lt;/p&gt;

&lt;p&gt;for an example:&lt;/p&gt;

&lt;pre&gt;
type MyStruct struct {
    SomeField string `json:&#34;some_field&#34;`
}
&lt;/pre&gt;

&lt;p&gt;According to &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34;&gt;Golang spec&lt;/a&gt;
&lt;blockquote&gt;
A field declaration may be followed by an optional string literal tag, which becomes an attribute for all the fields in the corresponding field declaration. The tags are made visible through a reflection interface and take part in type identity for structs but are otherwise ignored.
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;But be careful when you create json tags. If there is any white space in json tag, struct will not be unMarshaled properly. If you have a struct such as:&lt;/p&gt;

&lt;pre&gt;
type MyStruct struct {
    Foo string `json: &#34;foo&#34;`
}
&lt;/pre&gt;

&lt;p&gt;When you unmarshal a json string to &lt;code&gt;MyStruct&lt;/code&gt; type, it will give you zero value (empty string for a string). This is also very difficult to catch.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>killing process with child and grandchild processes  in Go</title>
      <link>http://varunksaini.com/kiling-processes-in-go/</link>
      <pubDate>Sun, 04 Oct 2015 06:30:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/kiling-processes-in-go/</guid>
      <description>&lt;p&gt;Go provides &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34;&gt;exec&lt;/a&gt; package in standard library to run external commands. Sometimes we need to run an external command from Go code and then kill the process created by command after certain time if it does not finish in a given time period.&lt;/p&gt;

&lt;p&gt;We can start a process&amp;hellip;
&lt;pre&gt;
    cmd := exec.Command(execPath, args&amp;hellip;)
&lt;/pre&gt;
and then process can be killed after certain given time&amp;hellip;.
&lt;pre&gt;
    case &amp;lt;-time.After(2 * time.Second):
        if err := cmd.Process.Kill(); err != nil {
            return 0, fmt.Errorf(&amp;ldquo;Failed to kill process: %v&amp;rdquo;, err)
        }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;But there is a problem with this code, what if the process start other &lt;a href=&#34;https://en.wikipedia.org/wiki/Child_process&#34;&gt;child processes&lt;/a&gt; and then those processes start new processes(grandchild processes). Once you kill the parent process those child processes become orphan and get a &lt;code&gt;PPID=1&lt;/code&gt;. In my particular scenario I had 4-5 orphaned processes from killed parent process and then these orphaned processes were creating an issue with subsequent run of the program.&lt;/p&gt;

&lt;p&gt;I started looking around and found this well written article on this topic &lt;a href=&#34;https://medium.com/@felixge/killing-a-child-process-and-all-of-its-children-in-go-54079af94773&#34;&gt;killing a child process and all of its children in Go&lt;/a&gt;.This article helped me understand how to setup a process group and kill the process.&lt;/p&gt;

&lt;p&gt;But The solution suggested in that article was not working in my case. Then I asked this question on &lt;a href=&#34;https://forum.golangbridge.org/t/killing-child-process-on-timeout-in-go-code/995&#34;&gt;Go forum&lt;/a&gt; and gophers helped me to find the solution.&lt;/p&gt;

&lt;p&gt;Now I create a process group when I create the command, then I kill the whole group on timeout and it kills the process as well as the children of the process.&lt;/p&gt;

&lt;pre&gt;
    cmd := exec.Command(execPath, args...)
    //create a new process group
    cmd.SysProcAttr = &amp;syscall.SysProcAttr{Setpgid: true}
&lt;/pre&gt;

&lt;p&gt;&lt;pre&gt;
    case &amp;lt;-time.After(timeout):
        pgid, err := syscall.Getpgid(cmd.Process.Pid)
        if err == nil {
            if err := syscall.Kill(-pgid, syscall.SIGKILL); err != nil {
                &amp;hellip;
            }
        }
&lt;/pre&gt;
We get the process group id &lt;code&gt;syscall.Getpgid&lt;/code&gt; and then kill the process by passing -pgid to &lt;code&gt;syscall.Kill&lt;/code&gt;. We use -pgid because we want to target the group id and not the particular process id.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Podcasts I listen</title>
      <link>http://varunksaini.com/fav-podcasts/</link>
      <pubDate>Sat, 19 Sep 2015 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/fav-podcasts/</guid>
      <description>&lt;p&gt;I find podcasts informative and entertaining. Every week I listen to at least 3-4 hours of podcasts. I can only listen to podcasts when I am in gym or in car. I can not listen while working because of distraction and I do not want to be hit by cars, so I also do not listen while walking. But it seems that I can still get at least 4-5 hours every week and that&amp;rsquo;s enough time to listen to most of these podcasts.&lt;/p&gt;

&lt;p&gt;These are the podcasts that I listen to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.motherjones.com/category/secondary-tags/inquiring-minds&#34;&gt;Inquiring minds&lt;/a&gt; - This is my favorite science podcast. The topics are diverse and hosts are really good.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.npr.org/sections/money/&#34;&gt;Planet Money&lt;/a&gt; - Who would not like Planet Money. It is informative and interesting at the same time.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://99percentinvisible.org/&#34;&gt;99% Invisible&lt;/a&gt; - A podcast about design, architecture and other interesting things related to them.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://freakonomics.com/category/freakonomics-radio/podcasts/&#34;&gt;Freakonomics Radio&lt;/a&gt; - This is my favorite too. If you are interested in economics/phycology and their impacts on world, Do not miss this podcast.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hanselminutes.com/&#34;&gt;Hanselminutes&lt;/a&gt; - My only dev podcast. Scott Hanselman  talks to people about different technologies and ideas.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thisamericanlife.org/&#34;&gt;This American Life&lt;/a&gt; - This is also a popular podcast. Topics are diverse and interesting.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nerdist.com/podcasts/nerdist-podcast-channel/&#34;&gt;The Nerdist&lt;/a&gt; - If you like stand up comedy and want to listen to some interesting people talk in very open environment, this is the podcast for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also listen to some other podcasts if I find some interesting topic, otherwise these are the podcast that I listen to.&lt;/p&gt;

&lt;p&gt;What are the podcasts that you guys like, Please share.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>running commands with go</title>
      <link>http://varunksaini.com/running_commands_with_go/</link>
      <pubDate>Sun, 12 Jul 2015 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/running_commands_with_go/</guid>
      <description>&lt;p&gt;Sometimes we need to run external commands programatically to use the output of the command to drive the execution. Go provides a nice interface to run the external commands through &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34;&gt;exec&lt;/a&gt; package. Running an external command is very easy and an example is given below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;os/exec&amp;quot;
)

func main() {
	out, err := exec.Command(&amp;quot;date&amp;quot;).Output()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf(&amp;quot;The time is %s\n&amp;quot;, out)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;exec&lt;/code&gt; package provides some other useful methods to work with external commands. Use this powerful package to build awesome things.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Go Lang Development Workflow</title>
      <link>http://varunksaini.com/go_dev_workflow/</link>
      <pubDate>Sat, 13 Jun 2015 11:11:00 -0900</pubDate>
      
      <guid>http://varunksaini.com/go_dev_workflow/</guid>
      <description>&lt;p&gt;I have been doing programming in Go from last 6 months. When you start a new project or start learning a new programming language, chossing your tools(text editor, plugins etc.) is as important as any other process.&lt;/p&gt;

&lt;p&gt;I use Sublime Text 3 with &lt;a href=&#34;https://github.com/DisposaBoy/GoSublime&#34;&gt;go-sublime&lt;/a&gt; plugin as my text editor. go-sublime adds many features to Sublime Text for go development and make the whole development process a little easier. I particularly like &amp;lsquo;go linting&amp;rsquo; and &amp;lsquo;go to definition&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;img src=&#34;http://varunksaini.com/img/sublime.png&#34; alt=&#34;Sublime Text&#34; title=&#34;Sublime Text&#34; style=&#34;width:700px; height: 500px;&#34;&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Once I have written the code and tests, I run &lt;code&gt;go test&lt;/code&gt; in terminal (I use iterm2 instead of default terminal app) to test my code. To check code coverage, I run &lt;code&gt;go test -cover&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;because sometime you need more than one terminal window, I use &lt;a href=&#34;http://tmux.github.io/&#34;&gt;tmux&lt;/a&gt; for that. tmux manages terminal windows and sessions. I started using tmux some time back and it is great.&lt;/p&gt;

&lt;p&gt;OSX window management is a pain in itself, I use &lt;a href=&#34;http://mizage.com/divvy/&#34;&gt;DIVVY&lt;/a&gt; to manage the windows. I am looking forward to &lt;a href=&#34;http://www.apple.com/osx/elcapitan-preview/&#34;&gt;OSX el capitan&lt;/a&gt;, which has window management build in the OSX (finally).&lt;/p&gt;

&lt;p&gt;Once I have tested my code thoroughly on my local machine, I send it to github for code review. I generally use git in terminal to run all the common git commands (such as &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&#34;http://github.com/MediaMath/grim&#34;&gt;GRIM&lt;/a&gt;, which is open sourced by the way, as our build server. So when I create a pull request for code review, grim takes the pull request and run the build to make sure that everything works as expected with new code, grim also updates the hipchat channel, so that team is aware about new pull request.&lt;/p&gt;

&lt;p&gt;This continous build system gives code reviewers a test run even before reviewing the code. Once the code review is done and thumpsup are given, code is ready to be merged in master.&lt;/p&gt;

&lt;p&gt;Once merged, time for next task and more Go code/learnings..&lt;/p&gt;

&lt;p&gt;Note: If you are a vim user, then &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; is an awesome go plugin for vim.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>using io.SectionReader in Go</title>
      <link>http://varunksaini.com/using-sectionReader/</link>
      <pubDate>Sun, 31 May 2015 06:30:00 -0600</pubDate>
      
      <guid>http://varunksaini.com/using-sectionReader/</guid>
      <description>&lt;p&gt;For my last task I was moving to an offset value in huge byte stream using &lt;code&gt;reader.Seek(int64(offset), whence)&lt;/code&gt; and reading the bytes there. But it was not good for the performance because I was moving in a big file(~1gigs). Then I came to know about &lt;code&gt;io.SectionReader&lt;/code&gt; and it made my life easier and helped me delete a lot of code(isn&amp;rsquo;t that best).&lt;/p&gt;

&lt;p&gt;I create the section reader using this function:&lt;/p&gt;

&lt;pre&gt;
func GetByteSection(pageBlock []byte, offset int64, sectionLength int64) *io.SectionReader {
    reader := bytes.NewReader(pageBlock)
    section := io.NewSectionReader(reader, offset, sectionLength)
    return section
}
&lt;/pre&gt;

&lt;p&gt;Then I read it like:&lt;/p&gt;

&lt;pre&gt;
tupleSection := GetByteSection(block, int64(headerOffset), int64(headerLength))
err = binary.Read(tupleSection, binary.LittleEndian, &amp;data)
if err != nil {
    return nil, fmt.Errorf(&#34;failed to read t_bits: %v\n&#34;, err)
}
&lt;/pre&gt;

&lt;p&gt;life has been easier with more &lt;a href=&#34;http://golang.org/pkg/io/#SectionReader&#34;&gt;sectionReader&lt;/a&gt; and less Seeks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Lang notes</title>
      <link>http://varunksaini.com/notes-from-Go-In-Action-book/</link>
      <pubDate>Mon, 25 May 2015 19:58:00 -0600</pubDate>
      
      <guid>http://varunksaini.com/notes-from-Go-In-Action-book/</guid>
      <description>&lt;p&gt;I got &lt;a href=&#34;http://www.manning.com/ketelsen/&#34;&gt;Go In Action&lt;/a&gt; book from &lt;a href=&#34;https://twitter.com/goinggodotnet&#34;&gt;William Kennedy&lt;/a&gt;. I was reading the book last week and I have a habit of taking some noted while reading. The book takes a very pragmatic approach to teach &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; and has very good code  examples. I am sharing some of the notes I took while reading the book. If anybody find the notes interesting, he/she can check the book also.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The empty interface is an interface implemented by every type.Interfaces allow you to express the capabilities of a type. If a type implements an interface, it means that a type has a specific set of capabilities.&lt;/li&gt;
&lt;li&gt;In Go, if your type implements the methods of an interface, it can be used anywhere that interface is expected, no declaration required.
One of the most common interfaces you will use in Go is the io.Reader. The io.Reader interface provides a simple way to declare that your type has data to be read in a way that other functions in the standard library understand.
For the build tools to produce an executable, the function &lt;strong&gt;main&lt;/strong&gt; must be declared and it becomes the entry point for the program.&lt;/li&gt;
&lt;li&gt;If our main function does not exist in package main, the build tools will not produce an executable.&lt;/li&gt;
&lt;li&gt;When we import code from the standard library, we only need to reference the name of the package unlike when we import code from outside of the standard library.&lt;/li&gt;
&lt;li&gt;The compiler will always look for the packages we import at the locations referenced by the &lt;strong&gt;GOROOT&lt;/strong&gt; and &lt;strong&gt;GOPATH&lt;/strong&gt; environment variables
In Go, identifiers are either exported or unexported from a package. An exported identifier can be directly accessed by code in other packages when the respective package is imported. These identifiers start with a capital letter. Unexported identifiers start with a lowercase letter and can&amp;rsquo;t be directly accessed by code in other packages.&lt;/li&gt;
&lt;li&gt;In Go, all variables are initialized to their zero value. For numeric types that value is 0, for strings it is an empty string, for boolean it is false and for pointers the zero value is nil. When it comes to reference types, there are underlying data structures that are initialized to their zero values. However, variables declared as a reference type set to their zero value will return the value of nil.&lt;/li&gt;
&lt;li&gt;A slice is a reference type that implements a dynamic array. We use slices in Go to work with lists of data.&lt;/li&gt;
&lt;li&gt;Channels are also a reference type in Go like maps and slices, but channels implement a queue of typed values that are used to communicate data between goroutines. Channels provide inherent synchronization mechanisms to make communication safe.&lt;/li&gt;
&lt;li&gt;Pointer variables are great for sharing variables between functions. They allow functions to access and change the state of a variable that was declared within the scope of a different function and possibly a different goroutine.&lt;/li&gt;
&lt;li&gt;In Go, all variables are passed by value. Since the value of a pointer variable is the address to the memory being pointed to, passing pointer variables between functions is still considered a pass by value.&lt;/li&gt;
&lt;li&gt;All .go files must declare the package that they belong to as the first line of the file excluding whitespace and comments. Packages are contained in a single directory. You may not have multiple packages in the same directory, nor may you split a package across multiple directories. This means that all .go files in a single directory must declare the same package name.&lt;/li&gt;
&lt;li&gt;The compiler will stop searching once it finds a package that satisfies the import statement. The important thing to remember is that the Go installation directory is the first place the compiler looks, then each directory listed in your GOPATH in the order that they are listed.&lt;/li&gt;
&lt;li&gt;you could have a utilities package for handling network code in one directory and a utilities package for handling text files in another directory. You can import both packages in the same program without confusion by placing an alias name in front of the package location. This process is called package aliasing because you are changing the name of the imported package when you import it.&lt;/li&gt;
&lt;li&gt;Blank Identifier: The &lt;strong&gt;_ (underscore character)&lt;/strong&gt; is known as the blank identifier and has many uses within Go. It&amp;rsquo;s used when you want to throw away the assignment of a value, including the assigment of an import to it&amp;rsquo;s package name, or ignoring return values from a function when you&amp;rsquo;re only interested in the others.&lt;/li&gt;
&lt;li&gt;Each package has the ability to provide an &lt;strong&gt;init method&lt;/strong&gt; that is invoked at the beginning of execution time. This method allows you to setup your package, initialize variables, or any other bootstrapping you may need for your package.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;go run&lt;/strong&gt; command both builds and executes the program.&lt;/li&gt;
&lt;li&gt;An array in Go is a fixed length data type that contains a contiguous block of elements of the same type. This could be a built-in type such as integers and strings, or it can be a struct type.&lt;/li&gt;
&lt;li&gt;When variables in Go are declared, they are always initialized with their zero value for their respective type and arrays are no different. When an array is initialized, each individual element that belongs to the array is initialized to its zero value.&lt;/li&gt;
&lt;li&gt;If the length is given as &amp;hellip;, Go will identify the length of the array based on the number of elements that are initialized:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;An array is a value in Go&lt;/strong&gt;. This means we can use it in an assignment operation. The variable name denotes the entire array and therefore, an array can be assigned to other arrays of the same type.&lt;/li&gt;
&lt;li&gt;Passing an array between functions can be an expensive operation in terms of memory and performance. When we pass variables between functions, they are always passed by value. When our variable is an array, this means the entire array, regardless of its size, is copied and passed to the function.&lt;/li&gt;
&lt;li&gt;Remember, if we specify a value inside the [ ] operator, we are creating an array. If we don&amp;rsquo;t specify a value, we are creating a slice:&lt;/li&gt;
&lt;li&gt;For slice[i:j] with an underlying array of capacity k, &lt;strong&gt;Length: j - i&lt;/strong&gt; and &lt;strong&gt;Capacity: k - i&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;One of the advantages of using a slice over an array is that we can grow the capacity of our slice as needed. Go takes care of all the operational details when we use the built-in function append.&lt;/li&gt;
&lt;li&gt;The append operation is clever when growing the capacity of the underlying array. Capacity is always doubled when the existing capacity of the slice is under one thousand (1k) elements. Once the number of elements goes over 1k, the capacity is grown by a factor of 1.25 or 25%. This growth algorithm may change in the language over time.&lt;/li&gt;
&lt;li&gt;The built-in function append is also a variadic function. This means we can pass multiple values to be appended in a single slice call. If we use the (&amp;hellip;) operator, we can append all the elements of one slice into another&lt;/li&gt;
&lt;li&gt;Since a slice is a collection, we can iterate over the elements. Go has a special keyword called &lt;strong&gt;range&lt;/strong&gt; that we use in conjunction with the keyword &lt;strong&gt;for&lt;/strong&gt; to iterate over slices.&lt;/li&gt;
&lt;li&gt;The keyword range when iterating over a slice will return two values. The first value is the &lt;strong&gt;index&lt;/strong&gt; position and the second &lt;strong&gt;value&lt;/strong&gt; is a copy of the value in that index position.&lt;/li&gt;
&lt;li&gt;It is important to know that range is making a copy of the value, not returning a reference. If we use the address of the value variable as a pointer to each element, we will be making a mistake.&lt;/li&gt;
&lt;li&gt;Passing a slice between two functions requires nothing more than passing the slice by value. Since the size of a slice is small, it is cheap to copy and pass between functions.&lt;/li&gt;
&lt;li&gt;On a 64 bit architecture, a slice requires 24 bytes of memory. The pointer field requires 8 bytes and the length and capacity fields require 8 bytes respectively. Since the data associated with a slice is contained in the underlying array, there are no problems passing a copy of a slice to any function. Only the slice is being copied, not the underlying array.&lt;/li&gt;
&lt;li&gt;A map is a data structure that provides us with an unordered collection of key/value pairs.&lt;/li&gt;
&lt;li&gt;The strength of a map is its ability to retrieve data quickly based on the key. A key works like an index, pointing to the value we associate with that key.&lt;/li&gt;
&lt;li&gt;A bool requires 1 byte of memory (8 bits) and represents a boolean value of true or false. (Computers canât address anything less than a byte, thatâs why it is 1 byte and not 1 bit).&lt;/li&gt;
&lt;li&gt;Some types get their representation based on the architecture of the machine the code is built for. A value of type int for example, can either have a size of 8 bytes (64 bits) or 4 bytes (32 bits) depending on the architecture.&lt;/li&gt;
&lt;li&gt;When we declare variables, the value that the variable represents is always initialized. The value can be initialized with a specific value or it can be initialized to its zero value, which is the default value for that variables type. For numeric types, the zero value would be 0, for strings it would be empty and for booleans it would be false. In the case of a struct, the zero value would apply to all the different fields in the struct.&lt;/li&gt;
&lt;li&gt;When a function has a receiver, we call that function a method. (could be a pointer receiver or value receiver).&lt;/li&gt;
&lt;li&gt;There are two types of receivers in Go, &lt;strong&gt;value receivers&lt;/strong&gt; and &lt;strong&gt;pointer receivers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When we declare a method using a value receiver, the method will always be operating against a copy of the value used to make the method call.&lt;/li&gt;
&lt;li&gt;Value receivers operate on a copy of the value used to make the method call and pointer receivers operate on the actual value.&lt;/li&gt;
&lt;li&gt;We can also call methods that are declared with a pointer receiver using a value.&lt;/li&gt;
&lt;li&gt;Think about types as having one of two natures: &lt;strong&gt;primitive&lt;/strong&gt; or &lt;strong&gt;non-primitive&lt;/strong&gt;. Primitive types create values that should not be shared. When different parts of our program need a primitive value, they should receive a copy and not a pointer to the value. Values that are created using a built-in or reference type exhibit this primitive nature.&lt;/li&gt;
&lt;li&gt;Non-primitive types create values that should be shared. When different parts of our program need a non-primitive value, they should receive a pointer to the value and not a copy. Values that are created using struct types exhibit this non-primitive nature.&lt;/li&gt;
&lt;li&gt;The built-in types are the set of types that are provided to us by the language. We know them as the set of numeric, string and boolean types. These types have a primitive nature to them. Because of this, values based on these types should be copied when passed to functions and methods.&lt;/li&gt;
&lt;li&gt;Struct types can be implemented to have either a primitive or non-primitive nature.&lt;/li&gt;
&lt;li&gt;Reference types in Go are the set of slice, map, channel, interface and function types.&lt;/li&gt;
&lt;li&gt;When we declare a variable from one of these types, the value that is created is called a header value. All the different header values from the different reference types contain a pointer to an underlying data structure. As well, each reference type also contains a set of unique fields that are used to manage the underlying data structure. We never share reference type values because the header value is designed to be copied. The header value contains a pointer, therefore you can pass a copy of any header value and share the underlying data structure intrinsically.&lt;/li&gt;
&lt;li&gt;Interfaces are types that just declare behavior. This behavior is never implemented by the interface type directly, but instead by user-defined types via methods. When a user-defined type implements the set of methods declared by an interface type, values of the user-defined type can be assigned to values of the interface type. This assignment stores the value of the user-defined type into the interface value.&lt;/li&gt;
&lt;li&gt;It says that values of type T only have as part of its method set, methods declared with a value receiver. However, pointers of type T have as part of its method set, methods declared with both value and pointer receivers.&lt;/li&gt;
&lt;li&gt;It says that if you implement an interface using a pointer receiver, then only pointers of that type implement the interface. If you implement an interface using a value receiver, then both values and pointers of that type implement the interface.&lt;/li&gt;
&lt;li&gt;Go allows you to take existing types and both extend or change their behavior. This capability is important for code reuse and for changing the behavior of an existing type to suit a new need. This is accomplished through &lt;strong&gt;type embedding&lt;/strong&gt;. It works by taking an existing type and declaring that type within the declaration of a new struct type. The type that is embedded is then called an inner type of the new &amp;ldquo;outer&amp;rdquo; type.&lt;/li&gt;
&lt;li&gt;When inner type as well as outer type has two separate implementation for an interface, inner typeâs implementation is not promoted for outer type. otherwise it is promoted.&lt;/li&gt;
&lt;li&gt;When you are writing code that will live in its own package, it is good practice to name the package the same as the folder the code is in. All the Go tooling expects this convention so it is a good practice to follow.&lt;/li&gt;
&lt;li&gt;When an identifier starts with a lowercase letter, the identifier is unexported or unknown to code outside the package. When an identifier starts with an uppercase letter, it is exported or known to code outside the package.&lt;/li&gt;
&lt;li&gt;The Go runtime has a sophisticated piece of software called the &lt;strong&gt;scheduler&lt;/strong&gt; that manages all the goroutines that are created and need processor time. The scheduler is special because it sits on top of the operating system and controls everything related to the running of goroutines. No scheduling is done by the operating system.&lt;/li&gt;
&lt;li&gt;Go runtime limits each program to a &lt;strong&gt;maximum of 10,000&lt;/strong&gt; threads by default. This value can be changed by calling the SetMaxThreads function from the runtime package. If any program attempts to use more threads, the program crashes.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;WaitGroup&lt;/strong&gt; is a semaphore that can be used to maintain a record of running goroutines. When the value of a WaitGroup is greater than zero, the Wait method will block.&lt;/li&gt;
&lt;li&gt;The keyword &lt;strong&gt;defer&lt;/strong&gt; is used to schedule other functions to be called when the function returns.&lt;/li&gt;
&lt;li&gt;The runtime package provides support for changing Go runtime configuration parameters.&lt;/li&gt;
&lt;li&gt;When two or more goroutines have unsynchronized access to a shared resource and attempt to read and write to that resource at the same time, we have what is called a race condition.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Atomic functions&lt;/strong&gt; provide a low-level locking mechanisms for synchronizing access to integers and pointers.&lt;/li&gt;
&lt;li&gt;Another way to synchronize access to a shared resource is by using a mutex. A mutex is named after the concept of mutual exclusion. A mutex is used to create a critical section around code that ensures only one goroutine at a time can execute that code section.&lt;/li&gt;
&lt;li&gt;When a resource needs to be shared between goroutines, channels act as a conduit between the goroutines and provide a mechanism that guarantees a synchronous exchange. When declaring a channel, the type of data that will be shared needs to be specified. Values and pointers of built-in, named, struct and reference types can be shared through a channel.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;unbuffered channel&lt;/strong&gt; is a channel with no capacity to hold any value before it is received. These types of channels require both a sending and receiving goroutine to be ready at the same instant before any send or receive operation can complete.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;buffered channel&lt;/strong&gt; is a channel with capacity to hold one or more values before they are received. These types of channels don&amp;rsquo;t force goroutines to be ready at the same instant to perform sends and receives. There are also different conditions for when a send or receive does block. A receive will only block if there is no value in the channel to receive. A send will only block if there is no available buffer to place the value being sent. This leads to the one big difference between unbuffered and buffered channels. An unbuffered channel provides a guarantee that an exchange between two goroutines is performed at the instant the send and receive take place. A buffered channel has no such guarantee.&lt;/li&gt;
&lt;li&gt;The Fatal family of functions are used to write a log message and then terminate the program using the &lt;strong&gt;os.Exit(1)&lt;/strong&gt; function call. The Panic family of functions are used to write a log message and then issue a panic, which unless recovered, will cause the program to terminate and stack trace. The Print family of functions are the standard way to write log messages.&lt;/li&gt;
&lt;li&gt;One nice thing about the log package, is that loggers are multi goroutine safe. This means that multiple goroutines at the same time can call these functions from the same logger value without the writes colliding with each other.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>