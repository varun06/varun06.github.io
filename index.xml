<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Varun Kumar</title>
    <link>https://varunksaini.com/</link>
    <description>Recent content on Varun Kumar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Mar 2020 09:43:35 -0500</lastBuildDate>
    
	<atom:link href="https://varunksaini.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Book Review - Software Engineering at Google: Lessons Learned from Programming Over Time</title>
      <link>https://varunksaini.com/book-review-seag/</link>
      <pubDate>Sat, 28 Mar 2020 09:43:35 -0500</pubDate>
      
      <guid>https://varunksaini.com/book-review-seag/</guid>
      <description>The premise of the book is to draw lessons from software engineering at google and present them in a digestible manner, this book does a good job of that. . Chapters in this book are written by a different people from Google(ex-Google) and that brings a fresh perspective to this book.
The book reintroduces the term engineering with a new definition: programming integrated over time, or how to make software programs stand the test of time.</description>
    </item>
    
    <item>
      <title>2020: My Reading List</title>
      <link>https://varunksaini.com/books-this-year/</link>
      <pubDate>Sun, 22 Mar 2020 06:49:08 -0500</pubDate>
      
      <guid>https://varunksaini.com/books-this-year/</guid>
      <description>These are the books that I have read so far this year.
  Outlier by Malcolm Gladwell
  The Gardener and the Carpenter: What the New Science of Child Development Tells Us About the Relationship Between Parents and Children by Alison Gopnik
  Nudge: Improving Decisions About Health, Wealth, and Happiness by Richard H. Thaler and Cass R. Sunstein
  Peak: Secrets from the New Science of Expertise by Anders Ericsson</description>
    </item>
    
    <item>
      <title>My Home Office Setup</title>
      <link>https://varunksaini.com/my-home-office-setup/</link>
      <pubDate>Thu, 19 Mar 2020 19:32:01 -0500</pubDate>
      
      <guid>https://varunksaini.com/my-home-office-setup/</guid>
      <description>I have been working from home for last 4 years. Initially I thought that I can get by a laptop and couch. But that&amp;rsquo;s not how it played out. Very soon I realized that I need to have a proper home office setup if I want to work from home for a long duration. And here I am after 4 years. I have acquired quite a few things, and this is a running list of that.</description>
    </item>
    
    <item>
      <title>Work from home and Corona Virus</title>
      <link>https://varunksaini.com/work-from-home-corona-virus/</link>
      <pubDate>Sun, 15 Mar 2020 14:22:49 -0500</pubDate>
      
      <guid>https://varunksaini.com/work-from-home-corona-virus/</guid>
      <description>Every company has been asking its employees to work from home because of ongoing Corona Virus pandemic. Becuase of this, There has been a great influx of articles about pros and cons of working from home. I have been working from home for last 3-4 years and here are some things that have worked fine for me.
Having a fixed schedule Having a fixed schedule really help. I start my work day at 9:00 AM and sign-off around 5:15 PM.</description>
    </item>
    
    <item>
      <title>Running Kafka in Docker on Mac</title>
      <link>https://varunksaini.com/running_kafka_in_docker_on_mac/</link>
      <pubDate>Fri, 01 Jun 2018 10:16:26 -0500</pubDate>
      
      <guid>https://varunksaini.com/running_kafka_in_docker_on_mac/</guid>
      <description>Running Confluent kafka stack in docker on macOS is little bit hacky. Confluent doesn&amp;rsquo;t support docker on macOS yet. But here is how I made it work on my local macOS. I am using a docker compose file and it brings up a single node/single broker kafka cluster.
 Save the below file to docker-compose.yml file on your local.  --- version: &#39;2&#39; services: zookeeper: image: confluentinc/cp-zookeeper:latest ports: - 2181:2181 environment: ZOOKEEPER_CLIENT_PORT: 2181 ZOOKEEPER_TICK_TIME: 2000 extra_hosts: - &amp;quot;moby:127.</description>
    </item>
    
    <item>
      <title>writing files completely to disk in go</title>
      <link>https://varunksaini.com/write-file-completely-to-disk-in-go/</link>
      <pubDate>Tue, 27 Jun 2017 08:01:00 -0500</pubDate>
      
      <guid>https://varunksaini.com/write-file-completely-to-disk-in-go/</guid>
      <description>When we write a file, how we make sure that file is written completely to disk. One of the way is write a temporary file first and then rename it, rename operation is atomic, so we get a complete file.
tempFile, err := ioutil.TempFile(path, name) if err != nil { return err } defer tempFile.Close() tempname := tempFile.Name() defer os.Remove(tempname) //Write to temp file err = os.Rename(tempname, filename) if err !</description>
    </item>
    
    <item>
      <title>backoff and  retry in go</title>
      <link>https://varunksaini.com/backoff-retry-in-golang/</link>
      <pubDate>Sun, 16 Apr 2017 08:01:00 -0500</pubDate>
      
      <guid>https://varunksaini.com/backoff-retry-in-golang/</guid>
      <description>Failure is a way of life. Requests(http or others..) can fail for many reasons. Decision to stop or retry can be very critical for applications. backoff algorithms provide a way to backoff and retry on a failure. There are two popular methods to backoff, constant backoff and exponential backoff.
I use backoff library, which is a Go port of exponential backoff algorithm from Google&amp;rsquo;s HTTP Client Library for Java.
backoff provides 4 main functionalities.</description>
    </item>
    
    <item>
      <title>a quick introduction to standard streams, file descriptors, and redirection</title>
      <link>https://varunksaini.com/a-quick-introduction-to-standard-streams/</link>
      <pubDate>Sun, 03 Jul 2016 13:47:05 -0500</pubDate>
      
      <guid>https://varunksaini.com/a-quick-introduction-to-standard-streams/</guid>
      <description>standard streams are pre connected input and output communication channels between a program and its environment.
The three standard streams are stdin, stdout, and stderr.
File descriptors are handles that are used to access an input or output file, stream, pipe, socket, device, network interface etc. File descriptors work by providing a layer of abstraction between an actual hardware device and a special file created by the kernel for the device, populated by udev, and stored in the /dev directory.</description>
    </item>
    
    <item>
      <title>standard bash error codes</title>
      <link>https://varunksaini.com/standard-bash-error-codes/</link>
      <pubDate>Sun, 03 Jul 2016 06:33:31 -0500</pubDate>
      
      <guid>https://varunksaini.com/standard-bash-error-codes/</guid>
      <description>Exit codes in bash indicate the previous command&amp;rsquo;s termination status. 0 indicates that command completion was successful while 1 indicates that command execution failed.
We can check the exit code generated by last command by using $?
$ echo $? It&amp;rsquo;s not only 1 that indicates unsuccessful completion, anything greater than 1 is a sign of command failure. Standard error code are listed here:
   Exit Code Description     0 Successful execution   1 Unsuccessful execution catchall   2 Incorrect use of shell builtin   126 Command can not execute   127 Command not Found   128 Incorrect exit code argument   128 + num Fatal error signal &amp;ldquo;num&amp;rdquo;   130 Script killed with CTRL + C   255+ Exit code is out of range    Note: Exit code is an integer value between 0 and/or 255.</description>
    </item>
    
    <item>
      <title>Review: The Go Programming language</title>
      <link>https://varunksaini.com/the-go-programming-language-book-review/</link>
      <pubDate>Sat, 12 Dec 2015 19:59:32 -0600</pubDate>
      
      <guid>https://varunksaini.com/the-go-programming-language-book-review/</guid>
      <description>I have been programming in Go from almost one year. I read The Go Programming Language Specification, went through A Tour of Go and looked at Effective Go many times. But when it was announced that Alan Donovan and Brian Kernighan are writing a book The Go Programming Language on Go, I didn&amp;rsquo;t think much and pre-ordered the book on Amazon.
I received the book on October 20, 2015 and started reading it immediately.</description>
    </item>
    
    <item>
      <title>using io.SectionReader in Go</title>
      <link>https://varunksaini.com/using-sectionreader/</link>
      <pubDate>Sun, 31 May 2015 06:30:00 -0600</pubDate>
      
      <guid>https://varunksaini.com/using-sectionreader/</guid>
      <description>For my last task I was moving to an offset value in huge byte stream using reader.Seek(int64(offset), whence) and reading the bytes there. But it was not good for the performance because I was moving in a big file(~1gigs). Then I came to know about io.SectionReader and it made my life easier and helped me delete a lot of code(isn&amp;rsquo;t that best).
I create the section reader using this function:</description>
    </item>
    
    <item>
      <title>Go Lang notes</title>
      <link>https://varunksaini.com/notes-from-go-in-action-book/</link>
      <pubDate>Mon, 25 May 2015 19:58:00 -0600</pubDate>
      
      <guid>https://varunksaini.com/notes-from-go-in-action-book/</guid>
      <description>I got Go In Action book from William Kennedy. I was reading the book last week and I have a habit of taking some noted while reading. The book takes a very pragmatic approach to teach Go and has very good code examples. I am sharing some of the notes I took while reading the book. If anybody find the notes interesting, he/she can check the book also.
 The empty interface is an interface implemented by every type.</description>
    </item>
    
    <item>
      <title>using io.LimitReader to read a binary file</title>
      <link>https://varunksaini.com/using_io_limitreader/</link>
      <pubDate>Sat, 18 Apr 2015 10:42:00 -0600</pubDate>
      
      <guid>https://varunksaini.com/using_io_limitreader/</guid>
      <description>I was working on a problem and wanted to read a very specific chunck of file. I read Go documentation and came through io.LimitReader. According to official documentation, &amp;ldquo;A LimitedReader reads from R but limits the amount of data returned to just N bytes. Each call to Read updates N to reflect the new amount remaining.&amp;rdquo; and this is what I wanted.
f, _ := os.Open(&amp;#34;largefile.bin&amp;#34;) f.Seek(123, 0) b := make([]byte, 150-123) // remaining length after seek  f.</description>
    </item>
    
    <item>
      <title>Working with files in go lang</title>
      <link>https://varunksaini.com/working-with-files-in-go/</link>
      <pubDate>Sat, 13 Dec 2014 06:40:15 -0600</pubDate>
      
      <guid>https://varunksaini.com/working-with-files-in-go/</guid>
      <description>Go makes working with file very easy and file reading is an operation that is used very frequently.
To open a file in Go, we can use &amp;ldquo;Open&amp;rdquo; function from the &amp;ldquo;os&amp;rdquo; package.
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ) func main() { file, err := os.Open(&amp;quot;test.txt&amp;quot;) if err != nil { fmt.Println(&amp;quot;erros is: &amp;quot;, err) return } defer file.Close() size, err := file.Stat() if err != nil { fmt.Println(&amp;quot;erros is: &amp;quot;, err) return } fs := make([]byte, size.</description>
    </item>
    
  </channel>
</rss>