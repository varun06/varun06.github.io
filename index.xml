<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Never stop learning...</title>
    <link>http://varunksaini.com/</link>
    <description>Recent content on Never stop learning...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Jun 2016 21:56:31 -0500</lastBuildDate>
    <atom:link href="http://varunksaini.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>gophercon 2016 here i come</title>
      <link>http://varunksaini.com/gophercon-2016-here-i-come/</link>
      <pubDate>Fri, 24 Jun 2016 21:56:31 -0500</pubDate>
      
      <guid>http://varunksaini.com/gophercon-2016-here-i-come/</guid>
      <description>&lt;p&gt;I got my &lt;a href=&#34;https://gophercon.com/&#34;&gt;gophercon&lt;/a&gt; ticket today. I always wanted to go to gophercon and finally it is happening this year. I am really excited to meet fellow gophers there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 19June</title>
      <link>http://varunksaini.com/weekly-reading-19June/</link>
      <pubDate>Sun, 19 Jun 2016 05:52:29 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-19June/</guid>
      <description>

&lt;p&gt;It seems I got overboard with reading and read a hell lot of articles from web. It confirms that I need some refinement in my workflow and that is going to happen this week. May be I will restrict my self to read only 5 general articles every week. &lt;strong&gt;&amp;ldquo;Read less, Read better&amp;rdquo;&lt;/strong&gt; is going to be my motto going forward.&lt;/p&gt;

&lt;h4 id=&#34;general&#34;&gt;General:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1. http://atlantic.com/health/archive/2016/16/i-stopped-showering-and-life-continued/
2. http://aeon.co/essays/there-s-a-better-way-to-get-smarter-than-brain-training-games
3. http://engineering.stanford.edu/news/david-dill-why-online-voting-danger-democracy
4. http://www.nytimes.com/2016/06/12/fashion/internet-technology-phones-introspection.html
5. http://www.newyorker.com/magazine/2016/04/11/gay-talese-the-voyeurs-motel
6. http://mobile.nytimes.com/2016/06/12/opinion/sunday/yes-there-have-been-aliens.html
7. https://aeon.co/ideas/why-the-brains-of-teenagers-excel-at-taking-risks
8. https://aeon.co/ideas/sex-is-a-costly-molecular-kind-of-wizardry-why-evolve-it
9. https://aeon.co/ideas/would-it-be-immoral-to-send-out-a-generation-starship
10. https://getpocket.com/@varunsaini06/share/772176
11. https://aeon.co/ideas/the-concrete-buildings-of-brutalism-are-beautiful
12. https://aeon.co/essays/should-we-trust-others-to-manage-our-own-safety-risks
13. http://qz.com/704723/to-be-more-self-reliant-children-need-boring-summers/
14. http://www.hanselman.com/blog/StopSayingLearningToCodeIsEasy.aspx
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;technical&#34;&gt;Technical:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1. http://www.ybrikman.com/writing/2015/11/11/running-docker-aws-ground-up/#deploying-docker-containers-on-ecs
2. http://vimcasts.org/blog/2012/08/on-sharpening-the-saw/
3. http://jvns.ca/blog/2016/06/13/should-you-be-scared-of-signals/
4. https://www.mauras.ch/securing-consul.html#prevent-rogue-nodes-joining-the-cluster
5. http://www.doc.ic.ac.uk/~cn06/pub/2016/dingo/main.pdf
6. http://www.markhneedham.com/blog/2012/07/15/tcpdump-learning-how-to-read-udp-packets/
7. https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
8. https://www.infoq.com/news/2016/06/programmers-write-better-code
9. https://aphyr.com/posts/313-strong-consistency-models
10. http://martinfowler.com/articles/serverless.html
11. https://skillsmatter.com/skillscasts/8340-london-go-usergroup#video
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>using consul acl with golang</title>
      <link>http://varunksaini.com/consul-acl-golang/</link>
      <pubDate>Fri, 17 Jun 2016 16:56:36 -0500</pubDate>
      
      <guid>http://varunksaini.com/consul-acl-golang/</guid>
      <description>&lt;p&gt;It is always a good idea to think about security. It is no exception when we are using &lt;a href=&#34;https://www.consul.io&#34;&gt;Consul&lt;/a&gt; for service discovery. Consul provides an optional Access Control List &lt;a href=&#34;https://en.wikipedia.org/wiki/Access_control_list&#34;&gt;ACL&lt;/a&gt; system which can be used to control access to data and APIs. An access control list (ACL) is a list of permissions attached to an object.&lt;/p&gt;

&lt;p&gt;Consul ACL is &lt;a href=&#34;https://en.wikipedia.org/wiki/Capability-based_security&#34;&gt;Capability-based&lt;/a&gt;. If you are familiar with AWS IAM, it will look similar to AWS IAM.&lt;/p&gt;

&lt;p&gt;To enable consul with ACL, add this to server configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;acl_datacenter&amp;quot;: &amp;quot;&amp;lt;datacenter name&amp;gt;&amp;quot;,
  &amp;quot;acl_master_token&amp;quot;: &amp;quot;&amp;lt;token&amp;gt;&amp;quot;,
  &amp;quot;acl_default_policy&amp;quot;: &amp;quot;deny&amp;quot;,
  &amp;quot;acl_down_policy&amp;quot;: &amp;quot;deny&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consul with this configuration will &amp;lsquo;deny&amp;rsquo; by default and we can allow read/write accesses per client.&lt;/p&gt;

&lt;p&gt;We can list the ACL&amp;rsquo;s with this curl command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl &amp;quot;http://localhost:8500/v1/acl/list?token=token&amp;amp;pretty=true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Consul is running on port 8500 at localhost.&lt;/p&gt;

&lt;p&gt;If we want to get a value from key/value store. We can use a curl like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl &amp;quot;http://localhost:8500/v1/kv/timeout?token=token&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;timeout&lt;/code&gt; is a key in Consul &lt;a href=&#34;https://www.consul.io/docs/agent/http/kv.html&#34;&gt;key/value&lt;/a&gt; store.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&#34;https://golang.org/&#34;&gt;golang&lt;/a&gt;, Consul provides an &lt;a href=&#34;https://github.com/hashicorp/consul/tree/master/api&#34;&gt;api&lt;/a&gt;.
With official Consul api, accessing a service or key/value store while ACL enabled is just adding token to &lt;a href=&#34;https://godoc.org/github.com/hashicorp/consul/api#QueryOptions&#34;&gt;QueryOption&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;options := &amp;amp;consulapi.QueryOption{
	Token: token,
}

pairs, meta, err := consulapi.Get(&amp;quot;timeout&amp;quot;, coptions)
if err != nil {
	return nil, nil, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More information about Consul &lt;a href=&#34;https://www.consul.io/docs/internals/acl.html&#34;&gt;ACL&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 12 June</title>
      <link>http://varunksaini.com/weekly-reading-12June/</link>
      <pubDate>Sun, 12 Jun 2016 06:33:33 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-12June/</guid>
      <description>

&lt;p&gt;My tracking of reading is paying off. I am more aware of what I am reading and as you can see it is more technical article then general now. I am reading more books too. I am implementing more tweaks to my workflow and I hope that will save me some more time for important things.&lt;/p&gt;

&lt;h4 id=&#34;technical&#34;&gt;Technical:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1. http://neverworkintheory.org/2016/04/26/java-exception-handling.html
2. https://distributedalgorithm.wordpress.com/2015/06/20/architecture-of-zab-zookeeper-atomic-broadcast-protocol/
3. http://howivim.com/2016/daniel-schauenberg/
4. https://talks.golang.org/2016/applicative.slide
5. http://www.doc.ic.ac.uk/~cn06/pub/2016/dingo/main.pdf
6. https://www.petekeen.net/dns-the-good-parts
7. https://techblog.airtime.com/microservice-continuous-integration-made-easy-with-aws-ecs-10d470e31af0#.asyuz4os3
8. http://dave.cheney.net/2016/06/12/stack-traces-and-the-errors-package
9. https://www.prod.facebook.com/notes/kent-beck/mastering-programming/1184427814923414
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;general&#34;&gt;General:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1. http://www.livemint.com/Companies/hLEBBx17cFY5rPjTjmIP9O/The-Patanjali-story.html
2. http://www.theatlantic.com/science/archive/2016/06/how-consciousness-evolved/485558/
3. https://www.prod.facebook.com/notes/kent-beck/mastering-programming/1184427814923414
4. http://progrium.com/blog/2016/04/25/generativity/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>consul service discovery using golang</title>
      <link>http://varunksaini.com/consul-service-discovery-golang/</link>
      <pubDate>Sat, 11 Jun 2016 06:23:57 -0500</pubDate>
      
      <guid>http://varunksaini.com/consul-service-discovery-golang/</guid>
      <description>

&lt;h2 id=&#34;what-is-service-discovery&#34;&gt;What is Service discovery:&lt;/h2&gt;

&lt;p&gt;Service discovery is a key component of most distributed systems and service oriented architectures. The problem seems simple at first:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How do clients determine the IP and port for a service that exist on multiple hosts?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Usually, we start off with some static configuration which gets us pretty far. Things get more complicated as we start deploying more services. There are many ways service locations can change in a live system, auto or manual scaling, new deployments of services, as well as hosts failing or being replaced.&lt;/p&gt;

&lt;p&gt;Dynamic service registration and discovery becomes very important in these scenarios in order to avoid service interruption.&lt;/p&gt;

&lt;p&gt;There are two sides to the problem of locating services.
    • Service Registration
    • and Service Discovery.&lt;/p&gt;

&lt;h4 id=&#34;service-registration&#34;&gt;Service Registration:&lt;/h4&gt;

&lt;p&gt;The process of a service registering its location in a central registry. It usually register its host and port and sometimes authentication credentials, protocols, versions numbers, and/or environment details.&lt;/p&gt;

&lt;h4 id=&#34;service-discovery&#34;&gt;Service Discovery:&lt;/h4&gt;

&lt;p&gt;The process of a client application querying the central registry to learn of the location of services.&lt;/p&gt;

&lt;p&gt;Example of popular service discovery systems are Consul, Zookeeper, etcd etc. Out of these, Consul is the only one that really tries to provide a comprehensive solution for service discovery.&lt;/p&gt;

&lt;h4 id=&#34;consul&#34;&gt;Consul:&lt;/h4&gt;

&lt;p&gt;consul is a service discovery tool from &lt;a href=&#34;https://www.hashicorp.com/&#34;&gt;hashicorp&lt;/a&gt;. Consul provides a consistent view of services and configuration. Consul monitors and changes service information based on the health of nodes. Consul provides a REST interface and web UI to see services and service configurations. Consul organizes services in service catalog and provides a DNS/REST/HTTP interface to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Service Discovery&lt;/strong&gt;: Clients of Consul can provide a service, such as API or postgresql, and other clients can use Consul to discover providers of a given service. Using either DNS or HTTP, applications can easily find the services they depend upon.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Health Checking&lt;/strong&gt;: Consul clients can provide any number of health checks, either associated with a given service (&amp;ldquo;is the webserver returning 200 OK&amp;rdquo;), or with the local node (&amp;ldquo;is memory utilization below 90%&amp;rdquo;). This information can be used by an operator to monitor cluster health, and it is used by the service discovery components to route traffic away from unhealthy hosts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Key/Value Store&lt;/strong&gt;: Applications can make use of Consul&amp;rsquo;s hierarchical key/value store for any number of purposes, including dynamic configuration, feature flagging, coordination, leader election, and more. The simple HTTP API makes it easy to use.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multi Datacenter&lt;/strong&gt;: Consul supports multiple datacenters out of the box. This means users of Consul do not have to worry about building additional layers of abstraction to grow to multiple regions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use Consul you start up an agent process. The Consul agent process is a long running daemon on every member of Consul cluster. The agent process can be run in server mode or client mode. Consul agent clients would run on every physical server or OS virtual machine (if that makes more sense). Client runs on server hosting services. The clients use gossip and RPC calls to stay in sync with Consul.&lt;/p&gt;

&lt;p&gt;Consul is built on top of serf, &lt;a href=&#34;https://www.serfdom.io/&#34;&gt; a full gossip protocol&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-a-local-consul-cluster&#34;&gt;setting up a local consul cluster&lt;/h2&gt;

&lt;p&gt;consul can be downloaded from &lt;a href=&#34;https://www.consul.io/downloads.html&#34;&gt;consul&lt;/a&gt; website . On OSX, if you are using homebrew as a package manager, consul can be installed from homebrew.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew cask install consul
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify the installation by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ consul
usage: consul [--version] [--help] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

Available commands are:
	agent          Runs a Consul agent
	configtest     Validate config file
	event          Fire a new event
	exec           Executes a command on Consul nodes
	force-leave    Forces a member of the cluster to enter the &amp;quot;left&amp;quot; state
	info           Provides debugging information for operators
	join           Tell Consul agent to join cluster
	keygen         Generates a new encryption key
	keyring        Manages gossip layer encryption keys
	leave          Gracefully leaves the Consul cluster and shuts down
	lock           Execute a command holding a lock
	maint          Controls node or service maintenance mode
	members        Lists the members of a Consul cluster
	monitor        Stream logs from a Consul agent
	reload         Triggers the agent to reload configuration files
	rtt            Estimates network round trip time between nodes
	version        Prints the Consul version
	watch          Watch for changes in Consul
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get an error, set your PATH correctly.&lt;/p&gt;

&lt;p&gt;After Consul is installed, the agent must be run. The agent can run either in server or client mode. Each datacenter must have at least one server, a cluster of 3 or 5 servers is recommended.&lt;/p&gt;

&lt;p&gt;All other agents run in client mode. A client is a very lightweight process that registers services, runs health checks, and forwards queries to servers. The agent must be run on every node that is part of the cluster so that we can get information from every node.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-dev&lt;/em&gt; will run consul in  dev mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;consul agent -dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use CTRL+C to stop the consul server.&lt;/p&gt;

&lt;p&gt;We have a server running, now let&amp;rsquo;s add a service to our consul server.&lt;/p&gt;

&lt;h4 id=&#34;consul-service&#34;&gt;Consul Service:&lt;/h4&gt;

&lt;p&gt;A service can be defined by providing a consul &lt;a href=&#34;https://www.consul.io/docs/agent/services.html&#34;&gt;service definition&lt;/a&gt; or by making &lt;a href=&#34;https://www.consul.io/docs/agent/http/agent.html#agent_service_register&#34;&gt;HTTP calls&lt;/a&gt; to consul server.&lt;/p&gt;

&lt;h4 id=&#34;example-service-definition&#34;&gt;Example service definition:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;service&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    &amp;quot;tags&amp;quot;: [&amp;quot;prod&amp;quot;],
    &amp;quot;address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;port&amp;quot;: 8000,
    &amp;quot;enableTagOverride&amp;quot;: false,
    &amp;quot;checks&amp;quot;: [
      {
        &amp;quot;script&amp;quot;:&amp;quot;check&amp;quot;,
        &amp;quot;interval&amp;quot;: &amp;quot;10s&amp;quot;
      }
    ]
  }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;querying-consul-service&#34;&gt;Querying Consul service&lt;/h4&gt;

&lt;p&gt;We can query consul service using DNS or HTTP API.&lt;/p&gt;

&lt;h4 id=&#34;dns-api&#34;&gt;DNS API:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;dig @127.0.0.1 -p 8600 myservice.service.consul
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;http-api&#34;&gt;HTTP API:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8500/v1/catalog/service/myservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have our server and client up and running. We can use consul to find our services&lt;/p&gt;

&lt;h4 id=&#34;service-discovery-from-golang&#34;&gt;Service Discovery from Golang:&lt;/h4&gt;

&lt;p&gt;We can use both DNS and HTTP &lt;a href=&#34;https://godoc.org/github.com/hashicorp/consul/api&#34;&gt;API&lt;/a&gt; to discover service information from consul. I have only used HTTP API and that&amp;rsquo;s what we are going to use today. We create an interface that give us methods to register, deregister, and get services from consul.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package consul

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;

	consul &amp;quot;github.com/hashicorp/consul/api&amp;quot;
)

//Client provides an interface for getting data out of Consul
type Client interface {
// Get a Service from consul
	Service(string, string) ([]string, error)
// Register a service with local agent
	Register(string, int) error
// Deregister a service with local agent
	DeRegister(string) error
}

type client struct {
	consul *consul.Client
}

//NewConsul returns a Client interface for given consul address
Func NewConsulClient(addr string) (Client, error) {
	config := consul.DefaultConfig()
	config.Address = addr
	c, err := consul.NewClient(config)
	if err != nil {
		return nil, err
	}
	return &amp;amp;client{consul: c}, nil
}

// Register a service with consul local agent
func (c *client) Register(name string, port int) error {
	reg := &amp;amp;consul.AgentServiceRegistration{
		ID:   name,
		Name: name,
		Port: port,
	}
	return c.consul.Agent().ServiceRegister(reg)
}

// DeRegister a service with consul local agent
func (c *client) DeRegister(id string) error {
	return c.consul.Agent().ServiceDeregister(id)
}

// Service return a service 
func (c *client) Service(service, tag string) ([]*ServiceEntry, *QueryMeta, error) {
	passingOnly := true 
	addrs, meta, err := c.consul.Health().Service(service, tag, passingOnly, nil)
	if len(addrs) == 0 &amp;amp;&amp;amp; err == nil {
		return nil, fmt.Errorf(&amp;quot;service ( %s ) was not found&amp;quot;, service)
	}
	if err != nil {
		return nil, err
	}
	return addrs, meta, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we have consul running and we know how to interact with consul with golang. It is time to build .&lt;/p&gt;

&lt;p&gt;Also, if you have any question, feel free to ping me &lt;a href=&#34;https://twitter.com/varunksaini&#34;&gt;@varunksaini&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 4June</title>
      <link>http://varunksaini.com/weekly-reading-4June/</link>
      <pubDate>Sat, 04 Jun 2016 16:45:52 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-4June/</guid>
      <description>&lt;p&gt;Tracking my online article reading has been helpful so far. I am more aware about what to read and what not to read. I am no saving articles mindlessly to my &lt;strong&gt;Pocket&lt;/strong&gt; app. This week I read an article about &lt;strong&gt;reading and comprehending&lt;/strong&gt; &lt;a href=&#34;https://blog.todoist.com/2016/04/25/read-less-learn-more/&#34;&gt;read less learn more&lt;/a&gt;, TL;DR when we read mindlessly we don&amp;rsquo;t comprehend much, and we don&amp;rsquo;t learn much. So idea is to learn more and read less. Also I read books from my kindle queue this week. I am done reading 50% of &lt;a href=&#34;https://www.amazon.com/gp/product/B00OM9OKEC/ref=kinw_myk_ro_title&#34;&gt;&amp;reg;evolution (Phoenix Horizon Book 1)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. http://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf
2. https://www.oreilly.com/ideas/swarm-v-fleet-v-kubernetes-v-mesos
3. http://googletesting.blogspot.com/2016/05/flaky-tests-at-google-and-how-we.html?m=1
4. https://coreos.com/blog/torus-distributed-storage-by-coreos.html
5. https://medium.com/@francesc/go-tooling-in-action-eca6882ff3bc#.46jdwvs4h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. http://lifehacker.com/everything-you-need-to-stock-your-first-home-bar-1779335148
2. http://www.newyorker.com/business/currency/the-tech-booms-second-cities
3. https://medium.com/@billjordan1/the-quiet-crisis-unfolding-in-software-development-cffbdafbf450#.mcoq5tcc4
4. http://jacquesmattheij.com/ycs-basic-income-experiment
5. http://www.hanselman.com/blog/IsTechnologyKillingCuriosity.aspx
6. http://jvns.ca/blog/2016/05/29/three-ways-to-solve-hard-programming-problems/
7. https://blog.devmastery.com/how-to-win-the-coding-interview-71ae7102d685#.td3h8rhs5
8. https://blog.todoist.com/2016/04/25/read-less-learn-more/
9. http://yosefk.com/blog/evil-tip-avoid-easy-things.html
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 29May</title>
      <link>http://varunksaini.com/weekly-reading-29May/</link>
      <pubDate>Sun, 29 May 2016 08:38:58 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-29May/</guid>
      <description>&lt;p&gt;This week I read more technical articles then general articles. Also I spent more time reading my kindle books. I am reading two books &lt;a href=&#34;https://www.amazon.com/gp/product/B00PWX7RPG&#34;&gt;Rise of the Robots: Technology and the Threat of a Jobless Future&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/evolution-Phoenix-Horizon-Book-ebook/dp/B00OM9OKEC&#34;&gt;Revolution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/23/java-garbage-collection-can-be-really-slow/&#34;&gt;http://jvns.ca/blog/2016/04/23/java-garbage-collection-can-be-really-slow/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/25/how-regular-expressions-go-fast/&#34;&gt;http://jvns.ca/blog/2016/04/25/how-regular-expressions-go-fast/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/30/cdns-arent-just-for-caching/&#34;&gt;http://jvns.ca/blog/2016/04/30/cdns-arent-just-for-caching/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/event-streams-kafka&#34;&gt;https://www.infoq.com/presentations/event-streams-kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linkedin.com/blog/2016/05/introducing-and-open-sourcing-ambry---linkedins-new-distributed-&#34;&gt;https://engineering.linkedin.com/blog/2016/05/introducing-and-open-sourcing-ambry---linkedins-new-distributed-&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://antirez.com/news/107&#34;&gt;http://antirez.com/news/107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/2016/open-sourcing-twitter-heron&#34;&gt;https://blog.twitter.com/2016/open-sourcing-twitter-heron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.nullspace.io/building-search-engines.html&#34;&gt;http://blog.nullspace.io/building-search-engines.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devblog.mediamath.com/cassandra-war-stories-part-1&#34;&gt;http://devblog.mediamath.com/cassandra-war-stories-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/blog/its-the-future/&#34;&gt;https://circleci.com/blog/its-the-future/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.mozhu.info/vimmers-you-dont-need-nerdtree-18f627b561c3#.2ag3f2axr&#34;&gt;https://blog.mozhu.info/vimmers-you-dont-need-nerdtree-18f627b561c3#.2ag3f2axr&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.troyhunt.com/going-dark-online-privacy-and-anonymity-for-normal-people/&#34;&gt;https://www.troyhunt.com/going-dark-online-privacy-and-anonymity-for-normal-people/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/05/22/how-do-you-write-blog-posts/&#34;&gt;http://jvns.ca/blog/2016/05/22/how-do-you-write-blog-posts/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>pretty print JSON in golang</title>
      <link>http://varunksaini.com/pretty-print-json-golang/</link>
      <pubDate>Sun, 22 May 2016 06:52:53 -0500</pubDate>
      
      <guid>http://varunksaini.com/pretty-print-json-golang/</guid>
      <description>&lt;p&gt;JSON is a very common standard to transmit data objects. &lt;a href=&#34;https://golang.org&#34;&gt;go&lt;/a&gt; provides great support for JSON. &lt;a href=&#34;https://golang.org/pkg/encoding/JSON/&#34;&gt;JSON package&lt;/a&gt; in standard library provides the methods to work with JSON in a go program. Generally we use JSON to tranmit the data but sometime we need to print the JSON data too. If a human eye is going to look at that data, it is a good idea to pretty print that JSON. Here is small function that will do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func prettyPrintJSON(b []byte) ([]byte, error) {
	var out bytes.Buffer
	err := JSON.Indent(&amp;amp;out, b, &amp;quot;&amp;quot;, &amp;quot;    &amp;quot;)
	return out.Bytes(), err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function takes a byte array and indent the JSON. Each element in JSON object begins on a new line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 22 May</title>
      <link>http://varunksaini.com/weekly-reading-22May/</link>
      <pubDate>Sun, 22 May 2016 06:20:37 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-22May/</guid>
      <description>&lt;p&gt;This week again I read more that 20 articles. I have a good mix of long form reading and quick reading articles. I read way more general(Science, Society etc.) compare to technical articles. Again Pocket app was handy to keep the articles saved for me.This logging has helped me in finding that I am reading a lot of stuff. I also have some books to read, so I might not read these many articles going forward and finish my books first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/how-going-to-mars-can-pave-the-way-to-saving-the-earth&#34;&gt;https://aeon.co/essays/how-going-to-mars-can-pave-the-way-to-saving-the-earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theguardian.com/technology/2016/may/12/facebook-free-basics-india-zuckerberg&#34;&gt;https://www.theguardian.com/technology/2016/may/12/facebook-free-basics-india-zuckerberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bbc.co.uk/news/magazine-27186709&#34;&gt;http://www.bbc.co.uk/news/magazine-27186709&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.1843magazine.com/culture/the-daily/how-taxi-driver-ruined-acting&#34;&gt;https://www.1843magazine.com/culture/the-daily/how-taxi-driver-ruined-acting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://usesthis.com/interviews/kirby.ferguson/&#34;&gt;https://usesthis.com/interviews/kirby.ferguson/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&#34;&gt;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatesnotes.com/Books/Seveneves&#34;&gt;https://www.gatesnotes.com/Books/Seveneves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qz.com/685852/hookup-culture/&#34;&gt;http://qz.com/685852/hookup-culture/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/why-decriminalising-sex-work-is-better-for-everyone&#34;&gt;https://aeon.co/opinions/why-decriminalising-sex-work-is-better-for-everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/why-watching-people-take-selfies-feels-so-awkward&#34;&gt;https://aeon.co/opinions/why-watching-people-take-selfies-feels-so-awkward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/the-golden-age-of-x86-gaming/&#34;&gt;https://blog.codinghorror.com/the-golden-age-of-x86-gaming/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://m.signalvnoise.com/eat-sleep-code-repeat-is-such-bullshit-c2a4d9beaaf5#.iw36jfax2&#34;&gt;https://m.signalvnoise.com/eat-sleep-code-repeat-is-such-bullshit-c2a4d9beaaf5#.iw36jfax2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tristanharris/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3#.v1vinnk58&#34;&gt;https://medium.com/@tristanharris/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3#.v1vinnk58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/05/19/a-few-reasons-to-be-skeptical-of-machine-learning-results/&#34;&gt;http://jvns.ca/blog/2016/05/19/a-few-reasons-to-be-skeptical-of-machine-learning-results/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wired.com/2016/05/maksym-igor-popov-fbi/&#34;&gt;https://www.wired.com/2016/05/maksym-igor-popov-fbi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.theatlantic.com/entertainment/archive/2016/05/the-future-is-almost-now/482718/&#34;&gt;http://www.theatlantic.com/entertainment/archive/2016/05/the-future-is-almost-now/482718/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/your-brain-does-not-process-information-and-it-is-not-a-computer&#34;&gt;https://aeon.co/essays/your-brain-does-not-process-information-and-it-is-not-a-computer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Technical Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/podcast-matt-ranney&#34;&gt;https://www.infoq.com/articles/podcast-matt-ranney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://karla.io/2016/04/30/ssh-for-fun-and-profit.html&#34;&gt;https://karla.io/2016/04/30/ssh-for-fun-and-profit.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/study/tcpdump/&#34;&gt;https://danielmiessler.com/study/tcpdump/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeanyi.co/posts/understanding-consensus/&#34;&gt;http://ifeanyi.co/posts/understanding-consensus/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://go-talks.appspot.com/github.com/mkevac/golangmoscow2016/gomeetup.slide&#34;&gt;http://go-talks.appspot.com/github.com/mkevac/golangmoscow2016/gomeetup.slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=N3PWzBeLX2M&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=N3PWzBeLX2M&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 15May</title>
      <link>http://varunksaini.com/weekly-reading-15May/</link>
      <pubDate>Sun, 15 May 2016 08:43:02 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-15May/</guid>
      <description>&lt;p&gt;I love reading and read a lot. Mostly my reading is on topics related to programming, science, and social science. When I find an article worth reading I use (pocket)[&lt;a href=&#34;https://getpocket.com&#34;&gt;https://getpocket.com&lt;/a&gt;] to store the article. Once I have 5-10 articles to read, I read them and then share them to twitter or facebook. Most of the reading happen on weekends and I also read some books too. Today morning I thought to start this section on my blog so that if someone find these articles enticing, they can also get the link to read them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://davidad.github.io/blog/2014/03/12/the-operating-system-is-out-of-date/&#34;&gt;http://davidad.github.io/blog/2014/03/12/the-operating-system-is-out-of-date/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://priceonomics.com/online-dating-and-the-death-of-the-mixed/&#34;&gt;http://priceonomics.com/online-dating-and-the-death-of-the-mixed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/how-game-theory-can-help-you-do-a-better-job-of-parenting&#34;&gt;https://aeon.co/opinions/how-game-theory-can-help-you-do-a-better-job-of-parenting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698652-europe-and-america-made-mistakes-misery-arab-world-caused-mainly-its-own&#34;&gt;http://www.economist.com/news/leaders/21698652-europe-and-america-made-mistakes-misery-arab-world-caused-mainly-its-own&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.thington.com/the-shape-of-things-66c1a8e9d606#.bt0gjz1vg&#34;&gt;https://blog.thington.com/the-shape-of-things-66c1a8e9d606#.bt0gjz1vg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/true-ai-is-both-logically-possible-and-utterly-implausible&#34;&gt;https://aeon.co/essays/true-ai-is-both-logically-possible-and-utterly-implausible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nautil.us/issue/36/aging/physics-makes-aging-inevitable-not-biology&#34;&gt;http://nautil.us/issue/36/aging/physics-makes-aging-inevitable-not-biology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hanselman.com/blog/10YearsAndOver520EpisodesOfPodcastingTechIsAMarathonNotASprint.aspx&#34;&gt;http://www.hanselman.com/blog/10YearsAndOver520EpisodesOfPodcastingTechIsAMarathonNotASprint.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nymag.com/scienceofus/2016/05/half-of-your-friends-probably-dont-think-of-you-as-a-friend.html&#34;&gt;http://nymag.com/scienceofus/2016/05/half-of-your-friends-probably-dont-think-of-you-as-a-friend.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&#34;&gt;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>unmarshal to map</title>
      <link>http://varunksaini.com/unmarshal-to-map/</link>
      <pubDate>Sun, 13 Mar 2016 07:57:24 -0500</pubDate>
      
      <guid>http://varunksaini.com/unmarshal-to-map/</guid>
      <description>&lt;p&gt;When you unmarhsal json to a map, always pass the reference to map object. This is very subtle and I fixed two bugs last week related to same thing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var m map[string]string
err := json.Unmarshal(data, m)
if err != nil {
	return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code snippet above will not fail/err. But when you look at m, you will get nothing. To fix this, we need to pass the reference to m in &lt;code&gt;json.Unmarshal&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var m map[string]string
err := json.Unmarshal(data, &amp;amp;m)
if err != nil {
	return err
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>do we need so many data scientists</title>
      <link>http://varunksaini.com/do-we-need-so-many-data-scientists/</link>
      <pubDate>Sat, 20 Feb 2016 06:57:49 -0600</pubDate>
      
      <guid>http://varunksaini.com/do-we-need-so-many-data-scientists/</guid>
      <description>&lt;p&gt;Hiring is a difficult problem to solve(&lt;a href=&#34;http://www.theatlantic.com/business/archive/2013/06/why-is-it-so-hard-to-hire-great-people/277122/&#34;&gt;http://www.theatlantic.com/business/archive/2013/06/why-is-it-so-hard-to-hire-great-people/277122/&lt;/a&gt;). Career fairs are a good way to meet college graduates who are looking for internship or full time opportunities. I have been to many career fairs and we found some really good engineers(some of them are my colleagues) there. But some time back I noticed that there are lots of students looking for data science or data analysts roles(both internship or full time). Even this year, I have been to two career fairs and I am amazed how many students wants to be data scientists or data analysts. I asked many current students why they want to be a data scientist or some time even &amp;ldquo;What is data science&amp;rdquo; but most of the time they don&amp;rsquo;t know.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know what is the reason and that&amp;rsquo;s why I thought of asking smart people&amp;hellip;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>https server in go</title>
      <link>http://varunksaini.com/https-server-in-go/</link>
      <pubDate>Mon, 25 Jan 2016 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/https-server-in-go/</guid>
      <description>&lt;p&gt;We organized &lt;a href=&#34;http://www.meetup.com/Chicago-Hardcore-Golang/events/226752090/&#34;&gt;Golang meetup&lt;/a&gt; in &lt;a href=&#34;http://mediamath.com&#34;&gt;MediaMath&lt;/a&gt; Chicago on 25th january. It was my first meetup talk and I gave a talk on writing secure servers in Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://go-talks.appspot.com/github.com/varun06/gomeetup/httpsandgo.slide#1&#34;&gt;https server in go&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Review: The Go Programming language</title>
      <link>http://varunksaini.com/the-Go-Programming-language-book-review/</link>
      <pubDate>Sat, 12 Dec 2015 19:59:32 -0600</pubDate>
      
      <guid>http://varunksaini.com/the-Go-Programming-language-book-review/</guid>
      <description>&lt;p&gt;I have been programming in Go from almost one year. I read &lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;, went through &lt;a href=&#34;https://tour.golang.org/welcome/1&#34;&gt;A Tour of Go&lt;/a&gt; and looked at &lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt; many times. But when it was announced that Alan Donovan and Brian Kernighan are writing a book &lt;a href=&#34;http://www.gopl.io/&#34;&gt;The Go Programming Language&lt;/a&gt; on Go, I didn&amp;rsquo;t think much and pre-ordered the book on &lt;a href=&#34;http://www.amazon.com/dp/0134190440&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I received the book on October 20, 2015 and started reading it immediately. I finished the book recently and writing a concise review of the book below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who is the book for:&lt;/strong&gt; Authors assume that reader has some programming experience in one or more dynamic or compiled languages, such as C, C++, Java, python, ruby etc. as far as Go language knowledge goes, they assume that you are new to Go. But that does not mean experienced programmers can not get any thing from this book. I have been programming in Go from almost one year and I also found many trick and areas to improve(that shows how experienced in Go I am..).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Organization of the book:&lt;/strong&gt; Book has 13 chapters about basic data types, functions, methods, interface and concurrency in Go. Last chapter of book is about doing low level programming in Go using unsafe package.Every chapter has theory, code examples and code exercises about the corresponding topic. First chapter is &lt;strong&gt;Tutorial&lt;/strong&gt; and basically is a tour of basic components of Go programming language, such as command line applications,  http server, working with images etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code samples and exercises:&lt;/strong&gt; This book certainly has some really well thought out code samples and code exercises. Code samples has a normal progression through out the book. Code exercises are also sometime related to sample code (adding new features, enhancing existing code) and sometime writing something new to fully grasp the concept. All the code examples are provided at book source code repository for download. Code exercises need to be done by reader as part of learning process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final thoughts:&lt;/strong&gt; A must have book for Go programmers. Specially who are just starting. Experienced programmers can use the book for reference and bragging rights.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issue with white space in json struct tags</title>
      <link>http://varunksaini.com/json-tag-in-struct-gotcha/</link>
      <pubDate>Mon, 19 Oct 2015 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/json-tag-in-struct-gotcha/</guid>
      <description>&lt;p&gt;Go requires all exported fields to start with a capitalized letter. But It is not common for JSON where lower case letter keys are preferred. We can solve this problem by using the struct tags for json.&lt;/p&gt;

&lt;p&gt;for an example:&lt;/p&gt;

&lt;pre&gt;
type MyStruct struct {
    SomeField string `json:&#34;some_field&#34;`
}
&lt;/pre&gt;

&lt;p&gt;According to &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34;&gt;Golang spec&lt;/a&gt;
&lt;blockquote&gt;
A field declaration may be followed by an optional string literal tag, which becomes an attribute for all the fields in the corresponding field declaration. The tags are made visible through a reflection interface and take part in type identity for structs but are otherwise ignored.
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;But be careful when you create json tags. If there is any white space in json tag, struct will not be unMarshaled properly. If you have a struct such as:&lt;/p&gt;

&lt;pre&gt;
type MyStruct struct {
    Foo string `json: &#34;foo&#34;`
}
&lt;/pre&gt;

&lt;p&gt;When you unmarshal a json string to &lt;code&gt;MyStruct&lt;/code&gt; type, it will give you zero value (empty string for a string). This is also very difficult to catch.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>