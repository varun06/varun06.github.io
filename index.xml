<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>keep living, keep learning..</title>
    <link>http://varunksaini.com/</link>
    <description>Recent content on keep living, keep learning..</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Copyright Text</copyright>
    <lastBuildDate>Sat, 04 Jun 2016 16:45:52 -0500</lastBuildDate>
    <atom:link href="http://varunksaini.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>weekly reading 4June</title>
      <link>http://varunksaini.com/weekly-reading-4June/</link>
      <pubDate>Sat, 04 Jun 2016 16:45:52 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-4June/</guid>
      <description>&lt;p&gt;Tracking my online article reading has been helpful so far. I am more aware about what to read and what not to read. I am no saving articles mindlessly to my &lt;strong&gt;Pocket&lt;/strong&gt; app. This week I read an article about &lt;strong&gt;reading and comprehending&lt;/strong&gt; &lt;a href=&#34;https://blog.todoist.com/2016/04/25/read-less-learn-more/&#34;&gt;read less learn more&lt;/a&gt;, TL;DR when we read mindlessly we don&amp;rsquo;t comprehend much, and we don&amp;rsquo;t learn much. So idea is to learn more and read less. Also I read books from my kindle queue this week. I am done reading 50% of &lt;a href=&#34;https://www.amazon.com/gp/product/B00OM9OKEC/ref=kinw_myk_ro_title&#34;&gt;&amp;reg;evolution (Phoenix Horizon Book 1)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. http://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf
2. https://www.oreilly.com/ideas/swarm-v-fleet-v-kubernetes-v-mesos
3. http://googletesting.blogspot.com/2016/05/flaky-tests-at-google-and-how-we.html?m=1
4. https://coreos.com/blog/torus-distributed-storage-by-coreos.html
5. https://medium.com/@francesc/go-tooling-in-action-eca6882ff3bc#.46jdwvs4h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. http://lifehacker.com/everything-you-need-to-stock-your-first-home-bar-1779335148
2. http://www.newyorker.com/business/currency/the-tech-booms-second-cities
3. https://medium.com/@billjordan1/the-quiet-crisis-unfolding-in-software-development-cffbdafbf450#.mcoq5tcc4
4. http://jacquesmattheij.com/ycs-basic-income-experiment
5. http://www.hanselman.com/blog/IsTechnologyKillingCuriosity.aspx
6. http://jvns.ca/blog/2016/05/29/three-ways-to-solve-hard-programming-problems/
7. https://blog.devmastery.com/how-to-win-the-coding-interview-71ae7102d685#.td3h8rhs5
8. https://blog.todoist.com/2016/04/25/read-less-learn-more/
9. http://yosefk.com/blog/evil-tip-avoid-easy-things.html
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 29May</title>
      <link>http://varunksaini.com/weekly-reading-29May/</link>
      <pubDate>Sun, 29 May 2016 08:38:58 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-29May/</guid>
      <description>&lt;p&gt;This week I read more technical articles then general articles. Also I spent more time reading my kindle books. I am reading two books &lt;a href=&#34;https://www.amazon.com/gp/product/B00PWX7RPG&#34;&gt;Rise of the Robots: Technology and the Threat of a Jobless Future&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/evolution-Phoenix-Horizon-Book-ebook/dp/B00OM9OKEC&#34;&gt;Revolution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/23/java-garbage-collection-can-be-really-slow/&#34;&gt;http://jvns.ca/blog/2016/04/23/java-garbage-collection-can-be-really-slow/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/25/how-regular-expressions-go-fast/&#34;&gt;http://jvns.ca/blog/2016/04/25/how-regular-expressions-go-fast/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/04/30/cdns-arent-just-for-caching/&#34;&gt;http://jvns.ca/blog/2016/04/30/cdns-arent-just-for-caching/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/event-streams-kafka&#34;&gt;https://www.infoq.com/presentations/event-streams-kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linkedin.com/blog/2016/05/introducing-and-open-sourcing-ambry---linkedins-new-distributed-&#34;&gt;https://engineering.linkedin.com/blog/2016/05/introducing-and-open-sourcing-ambry---linkedins-new-distributed-&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://antirez.com/news/107&#34;&gt;http://antirez.com/news/107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/2016/open-sourcing-twitter-heron&#34;&gt;https://blog.twitter.com/2016/open-sourcing-twitter-heron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.nullspace.io/building-search-engines.html&#34;&gt;http://blog.nullspace.io/building-search-engines.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devblog.mediamath.com/cassandra-war-stories-part-1&#34;&gt;http://devblog.mediamath.com/cassandra-war-stories-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/blog/its-the-future/&#34;&gt;https://circleci.com/blog/its-the-future/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.mozhu.info/vimmers-you-dont-need-nerdtree-18f627b561c3#.2ag3f2axr&#34;&gt;https://blog.mozhu.info/vimmers-you-dont-need-nerdtree-18f627b561c3#.2ag3f2axr&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.troyhunt.com/going-dark-online-privacy-and-anonymity-for-normal-people/&#34;&gt;https://www.troyhunt.com/going-dark-online-privacy-and-anonymity-for-normal-people/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/05/22/how-do-you-write-blog-posts/&#34;&gt;http://jvns.ca/blog/2016/05/22/how-do-you-write-blog-posts/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>pretty print JSON in golang</title>
      <link>http://varunksaini.com/pretty-print-json-golang/</link>
      <pubDate>Sun, 22 May 2016 06:52:53 -0500</pubDate>
      
      <guid>http://varunksaini.com/pretty-print-json-golang/</guid>
      <description>&lt;p&gt;JSON is a very common standard to transmit data objects. &lt;a href=&#34;https://golang.org&#34;&gt;go&lt;/a&gt; provides great support for JSON. &lt;a href=&#34;https://golang.org/pkg/encoding/JSON/&#34;&gt;JSON package&lt;/a&gt; in standard library provides the methods to work with JSON in a go program. Generally we use JSON to tranmit the data but sometime we need to print the JSON data too. If a human eye is going to look at that data, it is a good idea to pretty print that JSON. Here is small function that will do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func prettyPrintJSON(b []byte) ([]byte, error) {
	var out bytes.Buffer
	err := JSON.Indent(&amp;amp;out, b, &amp;quot;&amp;quot;, &amp;quot;    &amp;quot;)
	return out.Bytes(), err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function takes a byte array and indent the JSON. Each element in JSON object begins on a new line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 22 May</title>
      <link>http://varunksaini.com/weekly-reading-22May/</link>
      <pubDate>Sun, 22 May 2016 06:20:37 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-22May/</guid>
      <description>&lt;p&gt;This week again I read more that 20 articles. I have a good mix of long form reading and quick reading articles. I read way more general(Science, Society etc.) compare to technical articles. Again Pocket app was handy to keep the articles saved for me.This logging has helped me in finding that I am reading a lot of stuff. I also have some books to read, so I might not read these many articles going forward and finish my books first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/how-going-to-mars-can-pave-the-way-to-saving-the-earth&#34;&gt;https://aeon.co/essays/how-going-to-mars-can-pave-the-way-to-saving-the-earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theguardian.com/technology/2016/may/12/facebook-free-basics-india-zuckerberg&#34;&gt;https://www.theguardian.com/technology/2016/may/12/facebook-free-basics-india-zuckerberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bbc.co.uk/news/magazine-27186709&#34;&gt;http://www.bbc.co.uk/news/magazine-27186709&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.1843magazine.com/culture/the-daily/how-taxi-driver-ruined-acting&#34;&gt;https://www.1843magazine.com/culture/the-daily/how-taxi-driver-ruined-acting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://usesthis.com/interviews/kirby.ferguson/&#34;&gt;https://usesthis.com/interviews/kirby.ferguson/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&#34;&gt;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatesnotes.com/Books/Seveneves&#34;&gt;https://www.gatesnotes.com/Books/Seveneves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qz.com/685852/hookup-culture/&#34;&gt;http://qz.com/685852/hookup-culture/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/why-decriminalising-sex-work-is-better-for-everyone&#34;&gt;https://aeon.co/opinions/why-decriminalising-sex-work-is-better-for-everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/why-watching-people-take-selfies-feels-so-awkward&#34;&gt;https://aeon.co/opinions/why-watching-people-take-selfies-feels-so-awkward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/the-golden-age-of-x86-gaming/&#34;&gt;https://blog.codinghorror.com/the-golden-age-of-x86-gaming/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://m.signalvnoise.com/eat-sleep-code-repeat-is-such-bullshit-c2a4d9beaaf5#.iw36jfax2&#34;&gt;https://m.signalvnoise.com/eat-sleep-code-repeat-is-such-bullshit-c2a4d9beaaf5#.iw36jfax2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tristanharris/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3#.v1vinnk58&#34;&gt;https://medium.com/@tristanharris/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3#.v1vinnk58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/05/19/a-few-reasons-to-be-skeptical-of-machine-learning-results/&#34;&gt;http://jvns.ca/blog/2016/05/19/a-few-reasons-to-be-skeptical-of-machine-learning-results/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wired.com/2016/05/maksym-igor-popov-fbi/&#34;&gt;https://www.wired.com/2016/05/maksym-igor-popov-fbi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.theatlantic.com/entertainment/archive/2016/05/the-future-is-almost-now/482718/&#34;&gt;http://www.theatlantic.com/entertainment/archive/2016/05/the-future-is-almost-now/482718/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/your-brain-does-not-process-information-and-it-is-not-a-computer&#34;&gt;https://aeon.co/essays/your-brain-does-not-process-information-and-it-is-not-a-computer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Technical Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/podcast-matt-ranney&#34;&gt;https://www.infoq.com/articles/podcast-matt-ranney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://karla.io/2016/04/30/ssh-for-fun-and-profit.html&#34;&gt;https://karla.io/2016/04/30/ssh-for-fun-and-profit.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/study/tcpdump/&#34;&gt;https://danielmiessler.com/study/tcpdump/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeanyi.co/posts/understanding-consensus/&#34;&gt;http://ifeanyi.co/posts/understanding-consensus/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://go-talks.appspot.com/github.com/mkevac/golangmoscow2016/gomeetup.slide&#34;&gt;http://go-talks.appspot.com/github.com/mkevac/golangmoscow2016/gomeetup.slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=N3PWzBeLX2M&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=N3PWzBeLX2M&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 15May</title>
      <link>http://varunksaini.com/weekly-reading-15May/</link>
      <pubDate>Sun, 15 May 2016 08:43:02 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-15May/</guid>
      <description>&lt;p&gt;I love reading and read a lot. Mostly my reading is on topics related to programming, science, and social science. When I find an article worth reading I use (pocket)[&lt;a href=&#34;https://getpocket.com&#34;&gt;https://getpocket.com&lt;/a&gt;] to store the article. Once I have 5-10 articles to read, I read them and then share them to twitter or facebook. Most of the reading happen on weekends and I also read some books too. Today morning I thought to start this section on my blog so that if someone find these articles enticing, they can also get the link to read them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://davidad.github.io/blog/2014/03/12/the-operating-system-is-out-of-date/&#34;&gt;http://davidad.github.io/blog/2014/03/12/the-operating-system-is-out-of-date/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://priceonomics.com/online-dating-and-the-death-of-the-mixed/&#34;&gt;http://priceonomics.com/online-dating-and-the-death-of-the-mixed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/opinions/how-game-theory-can-help-you-do-a-better-job-of-parenting&#34;&gt;https://aeon.co/opinions/how-game-theory-can-help-you-do-a-better-job-of-parenting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698652-europe-and-america-made-mistakes-misery-arab-world-caused-mainly-its-own&#34;&gt;http://www.economist.com/news/leaders/21698652-europe-and-america-made-mistakes-misery-arab-world-caused-mainly-its-own&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.thington.com/the-shape-of-things-66c1a8e9d606#.bt0gjz1vg&#34;&gt;https://blog.thington.com/the-shape-of-things-66c1a8e9d606#.bt0gjz1vg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/true-ai-is-both-logically-possible-and-utterly-implausible&#34;&gt;https://aeon.co/essays/true-ai-is-both-logically-possible-and-utterly-implausible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nautil.us/issue/36/aging/physics-makes-aging-inevitable-not-biology&#34;&gt;http://nautil.us/issue/36/aging/physics-makes-aging-inevitable-not-biology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hanselman.com/blog/10YearsAndOver520EpisodesOfPodcastingTechIsAMarathonNotASprint.aspx&#34;&gt;http://www.hanselman.com/blog/10YearsAndOver520EpisodesOfPodcastingTechIsAMarathonNotASprint.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nymag.com/scienceofus/2016/05/half-of-your-friends-probably-dont-think-of-you-as-a-friend.html&#34;&gt;http://nymag.com/scienceofus/2016/05/half-of-your-friends-probably-dont-think-of-you-as-a-friend.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&#34;&gt;http://www.economist.com/news/leaders/21698240-it-question-when-not-if-real-trouble-will-hit-china-coming-debt-bust&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>unmarshal to map</title>
      <link>http://varunksaini.com/unmarshal-to-map/</link>
      <pubDate>Sun, 13 Mar 2016 07:57:24 -0500</pubDate>
      
      <guid>http://varunksaini.com/unmarshal-to-map/</guid>
      <description>&lt;p&gt;When you unmarhsal json to a map, always pass the reference to map object. This is very subtle and I fixed two bugs last week related to same thing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var m map[string]string
err := json.Unmarshal(data, m)
if err != nil {
	return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code snippet above will not fail/err. But when you look at m, you will get nothing. To fix this, we need to pass the reference to m in &lt;code&gt;json.Unmarshal&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var m map[string]string
err := json.Unmarshal(data, &amp;amp;m)
if err != nil {
	return err
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>do we need so many data scientists</title>
      <link>http://varunksaini.com/do-we-need-so-many-data-scientists/</link>
      <pubDate>Sat, 20 Feb 2016 06:57:49 -0600</pubDate>
      
      <guid>http://varunksaini.com/do-we-need-so-many-data-scientists/</guid>
      <description>&lt;p&gt;Hiring is a difficult problem to solve(&lt;a href=&#34;http://www.theatlantic.com/business/archive/2013/06/why-is-it-so-hard-to-hire-great-people/277122/&#34;&gt;http://www.theatlantic.com/business/archive/2013/06/why-is-it-so-hard-to-hire-great-people/277122/&lt;/a&gt;). Career fairs are a good way to meet college graduates who are looking for internship or full time opportunities. I have been to many career fairs and we found some really good engineers(some of them are my colleagues) there. But some time back I noticed that there are lots of students looking for data science or data analysts roles(both internship or full time). Even this year, I have been to two career fairs and I am amazed how many students wants to be data scientists or data analysts. I asked many current students why they want to be a data scientist or some time even &amp;ldquo;What is data science&amp;rdquo; but most of the time they don&amp;rsquo;t know.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know what is the reason and that&amp;rsquo;s why I thought of asking smart people&amp;hellip;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>https server in go</title>
      <link>http://varunksaini.com/https-server-in-go/</link>
      <pubDate>Mon, 25 Jan 2016 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/https-server-in-go/</guid>
      <description>&lt;p&gt;We organized &lt;a href=&#34;http://www.meetup.com/Chicago-Hardcore-Golang/events/226752090/&#34;&gt;Golang meetup&lt;/a&gt; in &lt;a href=&#34;http://mediamath.com&#34;&gt;MediaMath&lt;/a&gt; Chicago on 25th january. It was my first meetup talk and I gave a talk on writing secure servers in Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://go-talks.appspot.com/github.com/varun06/gomeetup/httpsandgo.slide#1&#34;&gt;https server in go&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Review: The Go Programming language</title>
      <link>http://varunksaini.com/the-Go-Programming-language-book-review/</link>
      <pubDate>Sat, 12 Dec 2015 19:59:32 -0600</pubDate>
      
      <guid>http://varunksaini.com/the-Go-Programming-language-book-review/</guid>
      <description>&lt;p&gt;I have been programming in Go from almost one year. I read &lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;, went through &lt;a href=&#34;https://tour.golang.org/welcome/1&#34;&gt;A Tour of Go&lt;/a&gt; and looked at &lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt; many times. But when it was announced that Alan Donovan and Brian Kernighan are writing a book &lt;a href=&#34;http://www.gopl.io/&#34;&gt;The Go Programming Language&lt;/a&gt; on Go, I didn&amp;rsquo;t think much and pre-ordered the book on &lt;a href=&#34;http://www.amazon.com/dp/0134190440&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I received the book on October 20, 2015 and started reading it immediately. I finished the book recently and writing a concise review of the book below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who is the book for:&lt;/strong&gt; Authors assume that reader has some programming experience in one or more dynamic or compiled languages, such as C, C++, Java, python, ruby etc. as far as Go language knowledge goes, they assume that you are new to Go. But that does not mean experienced programmers can not get any thing from this book. I have been programming in Go from almost one year and I also found many trick and areas to improve(that shows how experienced in Go I am..).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Organization of the book:&lt;/strong&gt; Book has 13 chapters about basic data types, functions, methods, interface and concurrency in Go. Last chapter of book is about doing low level programming in Go using unsafe package.Every chapter has theory, code examples and code exercises about the corresponding topic. First chapter is &lt;strong&gt;Tutorial&lt;/strong&gt; and basically is a tour of basic components of Go programming language, such as command line applications,  http server, working with images etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code samples and exercises:&lt;/strong&gt; This book certainly has some really well thought out code samples and code exercises. Code samples has a normal progression through out the book. Code exercises are also sometime related to sample code (adding new features, enhancing existing code) and sometime writing something new to fully grasp the concept. All the code examples are provided at book source code repository for download. Code exercises need to be done by reader as part of learning process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final thoughts:&lt;/strong&gt; A must have book for Go programmers. Specially who are just starting. Experienced programmers can use the book for reference and bragging rights.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issue with white space in json struct tags</title>
      <link>http://varunksaini.com/json-tag-in-struct-gotcha/</link>
      <pubDate>Mon, 19 Oct 2015 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/json-tag-in-struct-gotcha/</guid>
      <description>&lt;p&gt;Go requires all exported fields to start with a capitalized letter. But It is not common for JSON where lower case letter keys are preferred. We can solve this problem by using the struct tags for json.&lt;/p&gt;

&lt;p&gt;for an example:&lt;/p&gt;

&lt;pre&gt;
type MyStruct struct {
    SomeField string `json:&#34;some_field&#34;`
}
&lt;/pre&gt;

&lt;p&gt;According to &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34;&gt;Golang spec&lt;/a&gt;
&lt;blockquote&gt;
A field declaration may be followed by an optional string literal tag, which becomes an attribute for all the fields in the corresponding field declaration. The tags are made visible through a reflection interface and take part in type identity for structs but are otherwise ignored.
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;But be careful when you create json tags. If there is any white space in json tag, struct will not be unMarshaled properly. If you have a struct such as:&lt;/p&gt;

&lt;pre&gt;
type MyStruct struct {
    Foo string `json: &#34;foo&#34;`
}
&lt;/pre&gt;

&lt;p&gt;When you unmarshal a json string to &lt;code&gt;MyStruct&lt;/code&gt; type, it will give you zero value (empty string for a string). This is also very difficult to catch.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>killing process with child and grandchild processes  in Go</title>
      <link>http://varunksaini.com/kiling-processes-in-go/</link>
      <pubDate>Sun, 04 Oct 2015 06:30:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/kiling-processes-in-go/</guid>
      <description>&lt;p&gt;Go provides &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34;&gt;exec&lt;/a&gt; package in standard library to run external commands. Sometimes we need to run an external command from Go code and then kill the process created by command after certain time if it does not finish in a given time period.&lt;/p&gt;

&lt;p&gt;We can start a process&amp;hellip;
&lt;pre&gt;
    cmd := exec.Command(execPath, args&amp;hellip;)
&lt;/pre&gt;
and then process can be killed after certain given time&amp;hellip;.
&lt;pre&gt;
    case &amp;lt;-time.After(2 * time.Second):
        if err := cmd.Process.Kill(); err != nil {
            return 0, fmt.Errorf(&amp;ldquo;Failed to kill process: %v&amp;rdquo;, err)
        }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;But there is a problem with this code, what if the process start other &lt;a href=&#34;https://en.wikipedia.org/wiki/Child_process&#34;&gt;child processes&lt;/a&gt; and then those processes start new processes(grandchild processes). Once you kill the parent process those child processes become orphan and get a &lt;code&gt;PPID=1&lt;/code&gt;. In my particular scenario I had 4-5 orphaned processes from killed parent process and then these orphaned processes were creating an issue with subsequent run of the program.&lt;/p&gt;

&lt;p&gt;I started looking around and found this well written article on this topic &lt;a href=&#34;https://medium.com/@felixge/killing-a-child-process-and-all-of-its-children-in-go-54079af94773&#34;&gt;killing a child process and all of its children in Go&lt;/a&gt;.This article helped me understand how to setup a process group and kill the process.&lt;/p&gt;

&lt;p&gt;But The solution suggested in that article was not working in my case. Then I asked this question on &lt;a href=&#34;https://forum.golangbridge.org/t/killing-child-process-on-timeout-in-go-code/995&#34;&gt;Go forum&lt;/a&gt; and gophers helped me to find the solution.&lt;/p&gt;

&lt;p&gt;Now I create a process group when I create the command, then I kill the whole group on timeout and it kills the process as well as the children of the process.&lt;/p&gt;

&lt;pre&gt;
    cmd := exec.Command(execPath, args...)
    //create a new process group
    cmd.SysProcAttr = &amp;syscall.SysProcAttr{Setpgid: true}
&lt;/pre&gt;

&lt;p&gt;&lt;pre&gt;
    case &amp;lt;-time.After(timeout):
        pgid, err := syscall.Getpgid(cmd.Process.Pid)
        if err == nil {
            if err := syscall.Kill(-pgid, syscall.SIGKILL); err != nil {
                &amp;hellip;
            }
        }
&lt;/pre&gt;
We get the process group id &lt;code&gt;syscall.Getpgid&lt;/code&gt; and then kill the process by passing -pgid to &lt;code&gt;syscall.Kill&lt;/code&gt;. We use -pgid because we want to target the group id and not the particular process id.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Podcasts I listen</title>
      <link>http://varunksaini.com/fav-podcasts/</link>
      <pubDate>Sat, 19 Sep 2015 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/fav-podcasts/</guid>
      <description>&lt;p&gt;I find podcasts informative and entertaining. Every week I listen to at least 3-4 hours of podcasts. I can only listen to podcasts when I am in gym or in car. I can not listen while working because of distraction and I do not want to be hit by cars, so I also do not listen while walking. But it seems that I can still get at least 4-5 hours every week and that&amp;rsquo;s enough time to listen to most of these podcasts.&lt;/p&gt;

&lt;p&gt;These are the podcasts that I listen to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.motherjones.com/category/secondary-tags/inquiring-minds&#34;&gt;Inquiring minds&lt;/a&gt; - This is my favorite science podcast. The topics are diverse and hosts are really good.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.npr.org/sections/money/&#34;&gt;Planet Money&lt;/a&gt; - Who would not like Planet Money. It is informative and interesting at the same time.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://99percentinvisible.org/&#34;&gt;99% Invisible&lt;/a&gt; - A podcast about design, architecture and other interesting things related to them.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://freakonomics.com/category/freakonomics-radio/podcasts/&#34;&gt;Freakonomics Radio&lt;/a&gt; - This is my favorite too. If you are interested in economics/phycology and their impacts on world, Do not miss this podcast.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hanselminutes.com/&#34;&gt;Hanselminutes&lt;/a&gt; - My only dev podcast. Scott Hanselman  talks to people about different technologies and ideas.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thisamericanlife.org/&#34;&gt;This American Life&lt;/a&gt; - This is also a popular podcast. Topics are diverse and interesting.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nerdist.com/podcasts/nerdist-podcast-channel/&#34;&gt;The Nerdist&lt;/a&gt; - If you like stand up comedy and want to listen to some interesting people talk in very open environment, this is the podcast for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also listen to some other podcasts if I find some interesting topic, otherwise these are the podcast that I listen to.&lt;/p&gt;

&lt;p&gt;What are the podcasts that you guys like, Please share.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>running commands with go</title>
      <link>http://varunksaini.com/running_commands_with_go/</link>
      <pubDate>Sun, 12 Jul 2015 19:58:28 -0600</pubDate>
      
      <guid>http://varunksaini.com/running_commands_with_go/</guid>
      <description>&lt;p&gt;Sometimes we need to run external commands programatically to use the output of the command to drive the execution. Go provides a nice interface to run the external commands through &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34;&gt;exec&lt;/a&gt; package. Running an external command is very easy and an example is given below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;os/exec&amp;quot;
)

func main() {
	out, err := exec.Command(&amp;quot;date&amp;quot;).Output()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf(&amp;quot;The time is %s\n&amp;quot;, out)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;exec&lt;/code&gt; package provides some other useful methods to work with external commands. Use this powerful package to build awesome things.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Go Lang Development Workflow</title>
      <link>http://varunksaini.com/go_dev_workflow/</link>
      <pubDate>Sat, 13 Jun 2015 11:11:00 -0900</pubDate>
      
      <guid>http://varunksaini.com/go_dev_workflow/</guid>
      <description>&lt;p&gt;I have been doing programming in Go from last 6 months. When you start a new project or start learning a new programming language, chossing your tools(text editor, plugins etc.) is as important as any other process.&lt;/p&gt;

&lt;p&gt;I use Sublime Text 3 with &lt;a href=&#34;https://github.com/DisposaBoy/GoSublime&#34;&gt;go-sublime&lt;/a&gt; plugin as my text editor. go-sublime adds many features to Sublime Text for go development and make the whole development process a little easier. I particularly like &amp;lsquo;go linting&amp;rsquo; and &amp;lsquo;go to definition&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;img src=&#34;http://varunksaini.com/img/sublime.png&#34; alt=&#34;Sublime Text&#34; title=&#34;Sublime Text&#34; style=&#34;width:700px; height: 500px;&#34;&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Once I have written the code and tests, I run &lt;code&gt;go test&lt;/code&gt; in terminal (I use iterm2 instead of default terminal app) to test my code. To check code coverage, I run &lt;code&gt;go test -cover&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;because sometime you need more than one terminal window, I use &lt;a href=&#34;http://tmux.github.io/&#34;&gt;tmux&lt;/a&gt; for that. tmux manages terminal windows and sessions. I started using tmux some time back and it is great.&lt;/p&gt;

&lt;p&gt;OSX window management is a pain in itself, I use &lt;a href=&#34;http://mizage.com/divvy/&#34;&gt;DIVVY&lt;/a&gt; to manage the windows. I am looking forward to &lt;a href=&#34;http://www.apple.com/osx/elcapitan-preview/&#34;&gt;OSX el capitan&lt;/a&gt;, which has window management build in the OSX (finally).&lt;/p&gt;

&lt;p&gt;Once I have tested my code thoroughly on my local machine, I send it to github for code review. I generally use git in terminal to run all the common git commands (such as &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&#34;http://github.com/MediaMath/grim&#34;&gt;GRIM&lt;/a&gt;, which is open sourced by the way, as our build server. So when I create a pull request for code review, grim takes the pull request and run the build to make sure that everything works as expected with new code, grim also updates the hipchat channel, so that team is aware about new pull request.&lt;/p&gt;

&lt;p&gt;This continous build system gives code reviewers a test run even before reviewing the code. Once the code review is done and thumpsup are given, code is ready to be merged in master.&lt;/p&gt;

&lt;p&gt;Once merged, time for next task and more Go code/learnings..&lt;/p&gt;

&lt;p&gt;Note: If you are a vim user, then &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; is an awesome go plugin for vim.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>using io.SectionReader in Go</title>
      <link>http://varunksaini.com/using-sectionReader/</link>
      <pubDate>Sun, 31 May 2015 06:30:00 -0600</pubDate>
      
      <guid>http://varunksaini.com/using-sectionReader/</guid>
      <description>&lt;p&gt;For my last task I was moving to an offset value in huge byte stream using &lt;code&gt;reader.Seek(int64(offset), whence)&lt;/code&gt; and reading the bytes there. But it was not good for the performance because I was moving in a big file(~1gigs). Then I came to know about &lt;code&gt;io.SectionReader&lt;/code&gt; and it made my life easier and helped me delete a lot of code(isn&amp;rsquo;t that best).&lt;/p&gt;

&lt;p&gt;I create the section reader using this function:&lt;/p&gt;

&lt;pre&gt;
func GetByteSection(pageBlock []byte, offset int64, sectionLength int64) *io.SectionReader {
    reader := bytes.NewReader(pageBlock)
    section := io.NewSectionReader(reader, offset, sectionLength)
    return section
}
&lt;/pre&gt;

&lt;p&gt;Then I read it like:&lt;/p&gt;

&lt;pre&gt;
tupleSection := GetByteSection(block, int64(headerOffset), int64(headerLength))
err = binary.Read(tupleSection, binary.LittleEndian, &amp;data)
if err != nil {
    return nil, fmt.Errorf(&#34;failed to read t_bits: %v\n&#34;, err)
}
&lt;/pre&gt;

&lt;p&gt;life has been easier with more &lt;a href=&#34;http://golang.org/pkg/io/#SectionReader&#34;&gt;sectionReader&lt;/a&gt; and less Seeks.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>