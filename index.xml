<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Never stop learning...</title>
    <link>http://varunksaini.com/</link>
    <description>Recent content on Never stop learning...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Aug 2016 10:26:10 -0500</lastBuildDate>
    <atom:link href="http://varunksaini.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>laptop repair</title>
      <link>http://varunksaini.com/laptop-repair/</link>
      <pubDate>Sat, 13 Aug 2016 10:26:10 -0500</pubDate>
      
      <guid>http://varunksaini.com/laptop-repair/</guid>
      <description>&lt;p&gt;I haven&amp;rsquo;t published anything on my blog because my personal laptop was having some issues. It is a mid 2012 retina Macbook Pro and I have it from last 4 years. It was &lt;code&gt;kernel panicking&lt;/code&gt; and restarting every 5 minutes or so. I took it to Apple store and they ran some hardware tests. First they reinstalled the operating system and it did not help. I took it back for repair and they replaced the &lt;code&gt;logic board&lt;/code&gt;. Apple charged a flat fee of &lt;code&gt;$310 + tax&lt;/code&gt; for repairs. After repairs, laptop is working fine and I should be back to blooging now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>good read on golang and generics</title>
      <link>http://varunksaini.com/good-read-on-golang-and-generics/</link>
      <pubDate>Sun, 17 Jul 2016 06:57:00 -0500</pubDate>
      
      <guid>http://varunksaini.com/good-read-on-golang-and-generics/</guid>
      <description>&lt;p&gt;Generics in Golang is a topic that everybody loves to talk :). There have been lots of articles on golang and generics such as &lt;a href=&#34;http://blog.jonathanoliver.com/golang-has-generics/&#34;&gt;this&lt;/a&gt;, &lt;a href=&#34;http://bouk.co/blog/idiomatic-generics-in-go/&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;http://blog.ralch.com/tutorial/golang-code-generation-and-generics/&#34;&gt;this&lt;/a&gt;. You can see it is a favorite topics of golang developers to talk about (My team personally discuss lack of generics in golang at least once a week).&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&#34;https://appliedgo.net/generics/&#34;&gt;this&lt;/a&gt; article about generics on reddit and found it very informative. I hope this is helpful to you as I found it helpful for me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 19July</title>
      <link>http://varunksaini.com/weekly-reading-19July/</link>
      <pubDate>Sat, 16 Jul 2016 06:25:13 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-19July/</guid>
      <description>&lt;p&gt;This is what I read this week. Mostly technical and some documentation. I am not reading too many internet shared articles anymore. From next week I am thinking for refining it a bit more and add some context and date etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/07/03/debugging-tools-i-love/&#34;&gt;http://jvns.ca/blog/2016/07/03/debugging-tools-i-love/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aeon.co/ideas/the-mind-isn-t-locked-in-the-brain-but-extends-far-beyond-it&#34;&gt;https://aeon.co/ideas/the-mind-isn-t-locked-in-the-brain-but-extends-far-beyond-it&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.confluent.io/1.0/index.html&#34;&gt;http://docs.confluent.io/1.0/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://peter.bourgon.org/blog/2016/07/11/context.html&#34;&gt;http://peter.bourgon.org/blog/2016/07/11/context.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://jamesclear.com/power-of-environment&#34;&gt;http://jamesclear.com/power-of-environment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.newyorker.com/culture/cultural-comment/headphones-everywhere&#34;&gt;http://www.newyorker.com/culture/cultural-comment/headphones-everywhere&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://spinroot.com/gerard/pdf/P10.pdf&#34;&gt;http://spinroot.com/gerard/pdf/P10.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;https://github.com/golang/go/wiki/CodeReviewComments&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 9July</title>
      <link>http://varunksaini.com/weekly-reading-9July/</link>
      <pubDate>Sat, 09 Jul 2016 05:46:45 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-9July/</guid>
      <description>&lt;p&gt;This week I didn&amp;rsquo;t read too many online articles. But still found some good technical articles that I read.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://videlalvaro.github.io/2015/02/programming-myths.html&#34;&gt;http://videlalvaro.github.io/2015/02/programming-myths.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The real problem is forming our opinion very quicky without thinking a bit and looking at the context. Are &amp;quot;Goto&amp;quot; really harmful in computer programming or it is just a myth. This Statement by Donanld Knuth summerise this whole article -
&amp;quot;We shouldn’t merely remove go to statements because it’s the fashionable thing to do; the presence or absence of go to statements is not really the issue.&amp;quot;

Some great quotes from article:

&amp;quot;we should strive most of all for a program that is easy to understand and almost sure to work&amp;quot;

&amp;quot;the universal experience of programmers who have been using measurement tools has been that their intuitive guesses fail.&amp;quot;

&amp;quot;premature optimization is the root of all evil&amp;quot;

&amp;quot;Experience indicates that nearly everybody has the wrong idea about the real bottlenecks in his programs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dominik.honnef.co/posts/2010/10/why_you_should_try_tmux_instead_of_screen/&#34;&gt;http://dominik.honnef.co/posts/2010/10/why_you_should_try_tmux_instead_of_screen/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmux rocks and I use it everyday with vim :)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7#.dii68tn9g&#34;&gt;https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7#.dii68tn9g&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/@johannes_gehrs/getting-started-with-systemd-on-debian-jessie-e024758ca63d#.7jy8vcfdu&#34;&gt;https://medium.com/@johannes_gehrs/getting-started-with-systemd-on-debian-jessie-e024758ca63d#.7jy8vcfdu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/&#34;&gt;https://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bash fifos and golang channel</title>
      <link>http://varunksaini.com/bash-fifos-and-golang-channel/</link>
      <pubDate>Mon, 04 Jul 2016 22:05:36 -0500</pubDate>
      
      <guid>http://varunksaini.com/bash-fifos-and-golang-channel/</guid>
      <description>&lt;p&gt;I have been reading about &lt;a href=&#34;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&#34;&gt;bash&lt;/a&gt; this weekend and came to know about &lt;a href=&#34;http://www.linuxjournal.com/content/using-named-pipes-fifos-bash&#34;&gt;FIFOs&lt;/a&gt;. After first glance I found similarities between &lt;code&gt;named pipes&lt;/code&gt; and &lt;code&gt;golang channel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FIFOs&lt;/code&gt; are created using the &lt;code&gt;mkfifo&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkfifo test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FIFOs&lt;/code&gt; provide a &lt;code&gt;named pipe&lt;/code&gt; to shuttle data from one place to another. If we create a FIFO and send some data to it, it will remain blocked forever, until a command tries to read from it. If you are familiar with golang and golang channels, that&amp;rsquo;s an &lt;a href=&#34;https://golang.org/doc/effective_go.html#channels&#34;&gt;Unbuffered/synchronous channel&lt;/a&gt;. Unbuffered channel blocks until there is a receiver receiving from a channel.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;named pipes&lt;/code&gt; are very interesting and can be used in some interesting ways.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a quick introduction to standard streams, file descriptors, and redirection</title>
      <link>http://varunksaini.com/a-quick-introduction-to-standard-streams/</link>
      <pubDate>Sun, 03 Jul 2016 13:47:05 -0500</pubDate>
      
      <guid>http://varunksaini.com/a-quick-introduction-to-standard-streams/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_streams&#34;&gt;standard streams&lt;/a&gt; are pre connected input and output communication channels between a program and its environment.&lt;/p&gt;

&lt;p&gt;The three standard streams are &lt;em&gt;stdin&lt;/em&gt;, &lt;em&gt;stdout&lt;/em&gt;, and &lt;em&gt;stderr&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File_descriptor&#34;&gt;File descriptors&lt;/a&gt; are handles that are used to access an input or output file, stream, pipe, socket, device, network interface etc.
File descriptors work by providing a layer of abstraction between an actual hardware device and a special file created by the kernel for the device, populated by udev, and stored in the /dev directory. When a process makes a call for read/write, file descriptors provide a way to correctly route the call.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Stream&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Default&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;File Descriptors&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Standard Input&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;stdin&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Keyboard&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Standard Output&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;stdout&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Screen&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Standard error&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;stderr&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Screen&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Redirection_(computing)&#34;&gt;File Redirection&lt;/a&gt; is a common form of redirection. In file redirection, the FD for stdout is pointed to a file, rather than a screen. output redirection is accomplished by using greater-than sign &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;Write to a file&amp;quot; &amp;gt; testfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When above command is run, instead of displaying the text on screen, text is redirected to file. If the file wasn&amp;rsquo;t already there, it will be created and written to.If the file existed, it will be overwritten. To avoid overwriting an existing file, use &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; output redirection operator, which append the data to the end of file.&lt;/p&gt;

&lt;p&gt;Input redireciton is accomplished by using &lt;code&gt;&amp;lt;&lt;/code&gt; operator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat &amp;lt; testfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;file-descriptor-redirection&#34;&gt;File Descriptor Redirection&lt;/h4&gt;

&lt;p&gt;We can manually specify which file descriptor to redirect. It is accomplished by adding a numerical prefix of the standard stream we wish to redirect.&lt;/p&gt;

&lt;p&gt;Redirecting the stdout if a command to a file will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command 1&amp;gt; file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;redirecting file to stdin will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command 0&amp;lt; file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the defaults (naked descriptors) do not specify stderr, we need to specify them manually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm testfile 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will discard any message generated by &lt;code&gt;rm&lt;/code&gt; to &lt;code&gt;/dev/null&lt;/code&gt;. But a better idea will be to redirect the message to a file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm testfile 2&amp;gt; errfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometime we need to redirect more than one file descriptors. We can accomplish this by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat * &amp;gt; cat.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will redirect or stdout and sterr to &lt;code&gt;cat.log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is important to know that file descriptors are read from left to right.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here document&lt;/em&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; are perfect for embedding some data into a script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wc -c &amp;lt;&amp;lt;EOF
&amp;gt; Hello
&amp;gt; EOF
5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Here string&lt;/em&gt; &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; is very similar to &lt;em&gt;Here document&lt;/em&gt; but only works for a string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wc -c &amp;lt;&amp;lt;&amp;lt; &amp;quot;I am string&amp;quot;
12
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>standard bash error codes</title>
      <link>http://varunksaini.com/standard-bash-error-codes/</link>
      <pubDate>Sun, 03 Jul 2016 06:33:31 -0500</pubDate>
      
      <guid>http://varunksaini.com/standard-bash-error-codes/</guid>
      <description>&lt;p&gt;Exit codes in bash indicate the previous command&amp;rsquo;s termination status. 0 indicates that command completion was successful while 1 indicates that command execution failed.&lt;/p&gt;

&lt;p&gt;We can check the exit code generated by last command by using &lt;strong&gt;$?&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo $?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s not only 1 that indicates unsuccessful completion, anything greater than 1 is a sign of command failure. Standard error code are listed here:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;Exit Code&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Successful execution&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsuccessful execution catchall&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Incorrect use of shell builtin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;126&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Command can not execute&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;127&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Command not Found&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Incorrect exit code argument&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;128 + num&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Fatal error signal &amp;ldquo;num&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;130&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Script killed with CTRL + C&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;255+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Exit code is out of range&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note: Exit code is an integer value between 0 and/or 255.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 2July</title>
      <link>http://varunksaini.com/weekly-reading-2July/</link>
      <pubDate>Sat, 02 Jul 2016 20:13:23 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-2July/</guid>
      <description>

&lt;h4 id=&#34;general&#34;&gt;General&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.newyorker.com/science/maria-konnikova/casual-sex-everyone-is-doing-it&#34;&gt;http://www.newyorker.com/science/maria-konnikova/casual-sex-everyone-is-doing-it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fivethirtyeight.com/features/the-weird-world-of-expensive-wine/&#34;&gt;http://fivethirtyeight.com/features/the-weird-world-of-expensive-wine/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vox.com/technology/2016/6/23/12007694/elon-musk-simulation-cartoon&#34;&gt;http://www.vox.com/technology/2016/6/23/12007694/elon-musk-simulation-cartoon&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;technical&#34;&gt;Technical&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2016/06/26/automatically-fetch-your-projects-dependencies-with-gb&#34;&gt;http://dave.cheney.net/2016/06/26/automatically-fetch-your-projects-dependencies-with-gb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.riotgames.com/news/fixing-internet-real-time-applications-part-i&#34;&gt;http://engineering.riotgames.com/news/fixing-internet-real-time-applications-part-i&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.riotgames.com/news/fixing-internet-real-time-applications-part-ii&#34;&gt;http://engineering.riotgames.com/news/fixing-internet-real-time-applications-part-ii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2016/06/30/transistor-logic-fundamentals&#34;&gt;http://dave.cheney.net/2016/06/30/transistor-logic-fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/learning/why-is-service-discovery-important-and-what-is-consul&#34;&gt;https://www.oreilly.com/learning/why-is-service-discovery-important-and-what-is-consul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/06/30/why-do-we-use-the-linux-kernels-tcp-stack/&#34;&gt;http://jvns.ca/blog/2016/06/30/why-do-we-use-the-linux-kernels-tcp-stack/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matt.might.net/articles/what-cs-majors-should-know/&#34;&gt;http://matt.might.net/articles/what-cs-majors-should-know/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 26June</title>
      <link>http://varunksaini.com/weekly-reading-26June/</link>
      <pubDate>Sun, 26 Jun 2016 06:36:44 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-26June/</guid>
      <description>

&lt;p&gt;This weeks reading mostly included some highly popular articles from around the web. I read more documentation compared to technical articles from web.&lt;/p&gt;

&lt;h4 id=&#34;general&#34;&gt;General:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nytimes.com/2016/06/19/opinion/sunday/think-less-think-better.html&#34;&gt;http://www.nytimes.com/2016/06/19/opinion/sunday/think-less-think-better.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL;DR: When you think too much you miss the moment and miss what is happening around you. It rings true to me. Specially in my case, it should be &amp;ldquo;Read less, Read Better&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://digitalculturist.com/drowning-in-a-sea-of-information-563a3160efbb#.z3p094i92&#34;&gt;https://digitalculturist.com/drowning-in-a-sea-of-information-563a3160efbb#.z3p094i92&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This felt very personal. I have been asking same question(my situation is not as bad as author, but still). I am also trying to manage my information consumption and hence these writings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://a16z.com/2016/06/10/ai-deep-learning-machines/&#34;&gt;http://a16z.com/2016/06/10/ai-deep-learning-machines/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL;DR - Robots are coming&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.economist.com/news/leaders/21701265-how-minimise-damage-britains-senseless-self-inflicted-blow-tragic-split&#34;&gt;http://www.economist.com/news/leaders/21701265-how-minimise-damage-britains-senseless-self-inflicted-blow-tragic-split&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL;DR - Not good for UK, not for EU&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/essays/the-body-as-amusement-park-a-history-of-masturbation&#34;&gt;https://aeon.co/essays/the-body-as-amusement-park-a-history-of-masturbation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL;DR - It&amp;rsquo;s complicated.&lt;/p&gt;

&lt;h4 id=&#34;technical&#34;&gt;Technical:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2953944&#34;&gt;http://queue.acm.org/detail.cfm?id=2953944&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL:DR - speed of light sucks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.confluent.io/blog/how-to-choose-the-number-of-topicspartitions-in-a-kafka-cluster/&#34;&gt;http://www.confluent.io/blog/how-to-choose-the-number-of-topicspartitions-in-a-kafka-cluster/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL:DR - choose your partitions carefully&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/linode-cube/configuration-management-4-tools-reviewed-7233eb44e278#.jpj5mr2op&#34;&gt;https://medium.com/linode-cube/configuration-management-4-tools-reviewed-7233eb44e278#.jpj5mr2op&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL:DR - There are many configuration management tools. Choose the one that work for you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2016/06/24/gophers-please-tag-your-releases&#34;&gt;http://dave.cheney.net/2016/06/24/gophers-please-tag-your-releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL;DR - tag your release, it is good for everybody.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cyberciti.biz/howto/shell-primer-configuring-your-linux-unix-osx-environment/&#34;&gt;http://www.cyberciti.biz/howto/shell-primer-configuring-your-linux-unix-osx-environment/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TL;DR - Know your tools.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gophercon 2016 here i come</title>
      <link>http://varunksaini.com/gophercon-2016-here-i-come/</link>
      <pubDate>Fri, 24 Jun 2016 21:56:31 -0500</pubDate>
      
      <guid>http://varunksaini.com/gophercon-2016-here-i-come/</guid>
      <description>&lt;p&gt;I got my &lt;a href=&#34;https://gophercon.com/&#34;&gt;gophercon&lt;/a&gt; ticket today. I always wanted to go to gophercon and finally it is happening this year. I am really excited to meet fellow gophers there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 19June</title>
      <link>http://varunksaini.com/weekly-reading-19June/</link>
      <pubDate>Sun, 19 Jun 2016 05:52:29 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-19June/</guid>
      <description>

&lt;p&gt;It seems I got overboard with reading and read a hell lot of articles from web. It confirms that I need some refinement in my workflow and that is going to happen this week. May be I will restrict my self to read only 5 general articles every week. &lt;strong&gt;&amp;ldquo;Read less, Read better&amp;rdquo;&lt;/strong&gt; is going to be my motto going forward.&lt;/p&gt;

&lt;h4 id=&#34;general&#34;&gt;General:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1. http://atlantic.com/health/archive/2016/16/i-stopped-showering-and-life-continued/
2. http://aeon.co/essays/there-s-a-better-way-to-get-smarter-than-brain-training-games
3. http://engineering.stanford.edu/news/david-dill-why-online-voting-danger-democracy
4. http://www.nytimes.com/2016/06/12/fashion/internet-technology-phones-introspection.html
5. http://www.newyorker.com/magazine/2016/04/11/gay-talese-the-voyeurs-motel
6. http://mobile.nytimes.com/2016/06/12/opinion/sunday/yes-there-have-been-aliens.html
7. https://aeon.co/ideas/why-the-brains-of-teenagers-excel-at-taking-risks
8. https://aeon.co/ideas/sex-is-a-costly-molecular-kind-of-wizardry-why-evolve-it
9. https://aeon.co/ideas/would-it-be-immoral-to-send-out-a-generation-starship
10. https://getpocket.com/@varunsaini06/share/772176
11. https://aeon.co/ideas/the-concrete-buildings-of-brutalism-are-beautiful
12. https://aeon.co/essays/should-we-trust-others-to-manage-our-own-safety-risks
13. http://qz.com/704723/to-be-more-self-reliant-children-need-boring-summers/
14. http://www.hanselman.com/blog/StopSayingLearningToCodeIsEasy.aspx
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;technical&#34;&gt;Technical:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1. http://www.ybrikman.com/writing/2015/11/11/running-docker-aws-ground-up/#deploying-docker-containers-on-ecs
2. http://vimcasts.org/blog/2012/08/on-sharpening-the-saw/
3. http://jvns.ca/blog/2016/06/13/should-you-be-scared-of-signals/
4. https://www.mauras.ch/securing-consul.html#prevent-rogue-nodes-joining-the-cluster
5. http://www.doc.ic.ac.uk/~cn06/pub/2016/dingo/main.pdf
6. http://www.markhneedham.com/blog/2012/07/15/tcpdump-learning-how-to-read-udp-packets/
7. https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
8. https://www.infoq.com/news/2016/06/programmers-write-better-code
9. https://aphyr.com/posts/313-strong-consistency-models
10. http://martinfowler.com/articles/serverless.html
11. https://skillsmatter.com/skillscasts/8340-london-go-usergroup#video
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>using consul acl with golang</title>
      <link>http://varunksaini.com/consul-acl-golang/</link>
      <pubDate>Fri, 17 Jun 2016 16:56:36 -0500</pubDate>
      
      <guid>http://varunksaini.com/consul-acl-golang/</guid>
      <description>&lt;p&gt;It is always a good idea to think about security. It is no exception when we are using &lt;a href=&#34;https://www.consul.io&#34;&gt;Consul&lt;/a&gt; for service discovery. Consul provides an optional Access Control List &lt;a href=&#34;https://en.wikipedia.org/wiki/Access_control_list&#34;&gt;ACL&lt;/a&gt; system which can be used to control access to data and APIs. An access control list (ACL) is a list of permissions attached to an object.&lt;/p&gt;

&lt;p&gt;Consul ACL is &lt;a href=&#34;https://en.wikipedia.org/wiki/Capability-based_security&#34;&gt;Capability-based&lt;/a&gt;. If you are familiar with AWS IAM, it will look similar to AWS IAM.&lt;/p&gt;

&lt;p&gt;To enable consul with ACL, add this to server configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;acl_datacenter&amp;quot;: &amp;quot;&amp;lt;datacenter name&amp;gt;&amp;quot;,
  &amp;quot;acl_master_token&amp;quot;: &amp;quot;&amp;lt;token&amp;gt;&amp;quot;,
  &amp;quot;acl_default_policy&amp;quot;: &amp;quot;deny&amp;quot;,
  &amp;quot;acl_down_policy&amp;quot;: &amp;quot;deny&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consul with this configuration will &amp;lsquo;deny&amp;rsquo; by default and we can allow read/write accesses per client.&lt;/p&gt;

&lt;p&gt;We can list the ACL&amp;rsquo;s with this curl command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl &amp;quot;http://localhost:8500/v1/acl/list?token=token&amp;amp;pretty=true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Consul is running on port 8500 at localhost.&lt;/p&gt;

&lt;p&gt;If we want to get a value from key/value store. We can use a curl like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl &amp;quot;http://localhost:8500/v1/kv/timeout?token=token&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;timeout&lt;/code&gt; is a key in Consul &lt;a href=&#34;https://www.consul.io/docs/agent/http/kv.html&#34;&gt;key/value&lt;/a&gt; store.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&#34;https://golang.org/&#34;&gt;golang&lt;/a&gt;, Consul provides an &lt;a href=&#34;https://github.com/hashicorp/consul/tree/master/api&#34;&gt;api&lt;/a&gt;.
With official Consul api, accessing a service or key/value store while ACL enabled is just adding token to &lt;a href=&#34;https://godoc.org/github.com/hashicorp/consul/api#QueryOptions&#34;&gt;QueryOption&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;options := &amp;amp;consulapi.QueryOption{
	Token: token,
}

pairs, meta, err := consulapi.Get(&amp;quot;timeout&amp;quot;, coptions)
if err != nil {
	return nil, nil, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More information about Consul &lt;a href=&#34;https://www.consul.io/docs/internals/acl.html&#34;&gt;ACL&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 12 June</title>
      <link>http://varunksaini.com/weekly-reading-12June/</link>
      <pubDate>Sun, 12 Jun 2016 06:33:33 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-12June/</guid>
      <description>

&lt;p&gt;My tracking of reading is paying off. I am more aware of what I am reading and as you can see it is more technical article then general now. I am reading more books too. I am implementing more tweaks to my workflow and I hope that will save me some more time for important things.&lt;/p&gt;

&lt;h4 id=&#34;technical&#34;&gt;Technical:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1. http://neverworkintheory.org/2016/04/26/java-exception-handling.html
2. https://distributedalgorithm.wordpress.com/2015/06/20/architecture-of-zab-zookeeper-atomic-broadcast-protocol/
3. http://howivim.com/2016/daniel-schauenberg/
4. https://talks.golang.org/2016/applicative.slide
5. http://www.doc.ic.ac.uk/~cn06/pub/2016/dingo/main.pdf
6. https://www.petekeen.net/dns-the-good-parts
7. https://techblog.airtime.com/microservice-continuous-integration-made-easy-with-aws-ecs-10d470e31af0#.asyuz4os3
8. http://dave.cheney.net/2016/06/12/stack-traces-and-the-errors-package
9. https://www.prod.facebook.com/notes/kent-beck/mastering-programming/1184427814923414
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;general&#34;&gt;General:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1. http://www.livemint.com/Companies/hLEBBx17cFY5rPjTjmIP9O/The-Patanjali-story.html
2. http://www.theatlantic.com/science/archive/2016/06/how-consciousness-evolved/485558/
3. https://www.prod.facebook.com/notes/kent-beck/mastering-programming/1184427814923414
4. http://progrium.com/blog/2016/04/25/generativity/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>consul service discovery using golang</title>
      <link>http://varunksaini.com/consul-service-discovery-golang/</link>
      <pubDate>Sat, 11 Jun 2016 06:23:57 -0500</pubDate>
      
      <guid>http://varunksaini.com/consul-service-discovery-golang/</guid>
      <description>

&lt;h2 id=&#34;what-is-service-discovery&#34;&gt;What is Service discovery:&lt;/h2&gt;

&lt;p&gt;Service discovery is a key component of most distributed systems and service oriented architectures. The problem seems simple at first:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How do clients determine the IP and port for a service that exist on multiple hosts?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Usually, we start off with some static configuration which gets us pretty far. Things get more complicated as we start deploying more services. There are many ways service locations can change in a live system, auto or manual scaling, new deployments of services, as well as hosts failing or being replaced.&lt;/p&gt;

&lt;p&gt;Dynamic service registration and discovery becomes very important in these scenarios in order to avoid service interruption.&lt;/p&gt;

&lt;p&gt;There are two sides to the problem of locating services.
    • Service Registration
    • and Service Discovery.&lt;/p&gt;

&lt;h4 id=&#34;service-registration&#34;&gt;Service Registration:&lt;/h4&gt;

&lt;p&gt;The process of a service registering its location in a central registry. It usually register its host and port and sometimes authentication credentials, protocols, versions numbers, and/or environment details.&lt;/p&gt;

&lt;h4 id=&#34;service-discovery&#34;&gt;Service Discovery:&lt;/h4&gt;

&lt;p&gt;The process of a client application querying the central registry to learn of the location of services.&lt;/p&gt;

&lt;p&gt;Example of popular service discovery systems are Consul, Zookeeper, etcd etc. Out of these, Consul is the only one that really tries to provide a comprehensive solution for service discovery.&lt;/p&gt;

&lt;h4 id=&#34;consul&#34;&gt;Consul:&lt;/h4&gt;

&lt;p&gt;consul is a service discovery tool from &lt;a href=&#34;https://www.hashicorp.com/&#34;&gt;hashicorp&lt;/a&gt;. Consul provides a consistent view of services and configuration. Consul monitors and changes service information based on the health of nodes. Consul provides a REST interface and web UI to see services and service configurations. Consul organizes services in service catalog and provides a DNS/REST/HTTP interface to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Service Discovery&lt;/strong&gt;: Clients of Consul can provide a service, such as API or postgresql, and other clients can use Consul to discover providers of a given service. Using either DNS or HTTP, applications can easily find the services they depend upon.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Health Checking&lt;/strong&gt;: Consul clients can provide any number of health checks, either associated with a given service (&amp;ldquo;is the webserver returning 200 OK&amp;rdquo;), or with the local node (&amp;ldquo;is memory utilization below 90%&amp;rdquo;). This information can be used by an operator to monitor cluster health, and it is used by the service discovery components to route traffic away from unhealthy hosts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Key/Value Store&lt;/strong&gt;: Applications can make use of Consul&amp;rsquo;s hierarchical key/value store for any number of purposes, including dynamic configuration, feature flagging, coordination, leader election, and more. The simple HTTP API makes it easy to use.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multi Datacenter&lt;/strong&gt;: Consul supports multiple datacenters out of the box. This means users of Consul do not have to worry about building additional layers of abstraction to grow to multiple regions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use Consul you start up an agent process. The Consul agent process is a long running daemon on every member of Consul cluster. The agent process can be run in server mode or client mode. Consul agent clients would run on every physical server or OS virtual machine (if that makes more sense). Client runs on server hosting services. The clients use gossip and RPC calls to stay in sync with Consul.&lt;/p&gt;

&lt;p&gt;Consul is built on top of serf, &lt;a href=&#34;https://www.serfdom.io/&#34;&gt; a full gossip protocol&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-a-local-consul-cluster&#34;&gt;setting up a local consul cluster&lt;/h2&gt;

&lt;p&gt;consul can be downloaded from &lt;a href=&#34;https://www.consul.io/downloads.html&#34;&gt;consul&lt;/a&gt; website . On OSX, if you are using homebrew as a package manager, consul can be installed from homebrew.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew cask install consul
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify the installation by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ consul
usage: consul [--version] [--help] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

Available commands are:
	agent          Runs a Consul agent
	configtest     Validate config file
	event          Fire a new event
	exec           Executes a command on Consul nodes
	force-leave    Forces a member of the cluster to enter the &amp;quot;left&amp;quot; state
	info           Provides debugging information for operators
	join           Tell Consul agent to join cluster
	keygen         Generates a new encryption key
	keyring        Manages gossip layer encryption keys
	leave          Gracefully leaves the Consul cluster and shuts down
	lock           Execute a command holding a lock
	maint          Controls node or service maintenance mode
	members        Lists the members of a Consul cluster
	monitor        Stream logs from a Consul agent
	reload         Triggers the agent to reload configuration files
	rtt            Estimates network round trip time between nodes
	version        Prints the Consul version
	watch          Watch for changes in Consul
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get an error, set your PATH correctly.&lt;/p&gt;

&lt;p&gt;After Consul is installed, the agent must be run. The agent can run either in server or client mode. Each datacenter must have at least one server, a cluster of 3 or 5 servers is recommended.&lt;/p&gt;

&lt;p&gt;All other agents run in client mode. A client is a very lightweight process that registers services, runs health checks, and forwards queries to servers. The agent must be run on every node that is part of the cluster so that we can get information from every node.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-dev&lt;/em&gt; will run consul in  dev mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;consul agent -dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use CTRL+C to stop the consul server.&lt;/p&gt;

&lt;p&gt;We have a server running, now let&amp;rsquo;s add a service to our consul server.&lt;/p&gt;

&lt;h4 id=&#34;consul-service&#34;&gt;Consul Service:&lt;/h4&gt;

&lt;p&gt;A service can be defined by providing a consul &lt;a href=&#34;https://www.consul.io/docs/agent/services.html&#34;&gt;service definition&lt;/a&gt; or by making &lt;a href=&#34;https://www.consul.io/docs/agent/http/agent.html#agent_service_register&#34;&gt;HTTP calls&lt;/a&gt; to consul server.&lt;/p&gt;

&lt;h4 id=&#34;example-service-definition&#34;&gt;Example service definition:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;service&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    &amp;quot;tags&amp;quot;: [&amp;quot;prod&amp;quot;],
    &amp;quot;address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;port&amp;quot;: 8000,
    &amp;quot;enableTagOverride&amp;quot;: false,
    &amp;quot;checks&amp;quot;: [
      {
        &amp;quot;script&amp;quot;:&amp;quot;check&amp;quot;,
        &amp;quot;interval&amp;quot;: &amp;quot;10s&amp;quot;
      }
    ]
  }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;querying-consul-service&#34;&gt;Querying Consul service&lt;/h4&gt;

&lt;p&gt;We can query consul service using DNS or HTTP API.&lt;/p&gt;

&lt;h4 id=&#34;dns-api&#34;&gt;DNS API:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;dig @127.0.0.1 -p 8600 myservice.service.consul
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;http-api&#34;&gt;HTTP API:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8500/v1/catalog/service/myservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have our server and client up and running. We can use consul to find our services&lt;/p&gt;

&lt;h4 id=&#34;service-discovery-from-golang&#34;&gt;Service Discovery from Golang:&lt;/h4&gt;

&lt;p&gt;We can use both DNS and HTTP &lt;a href=&#34;https://godoc.org/github.com/hashicorp/consul/api&#34;&gt;API&lt;/a&gt; to discover service information from consul. I have only used HTTP API and that&amp;rsquo;s what we are going to use today. We create an interface that give us methods to register, deregister, and get services from consul.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package consul

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;

	consul &amp;quot;github.com/hashicorp/consul/api&amp;quot;
)

//Client provides an interface for getting data out of Consul
type Client interface {
// Get a Service from consul
	Service(string, string) ([]string, error)
// Register a service with local agent
	Register(string, int) error
// Deregister a service with local agent
	DeRegister(string) error
}

type client struct {
	consul *consul.Client
}

//NewConsul returns a Client interface for given consul address
Func NewConsulClient(addr string) (Client, error) {
	config := consul.DefaultConfig()
	config.Address = addr
	c, err := consul.NewClient(config)
	if err != nil {
		return nil, err
	}
	return &amp;amp;client{consul: c}, nil
}

// Register a service with consul local agent
func (c *client) Register(name string, port int) error {
	reg := &amp;amp;consul.AgentServiceRegistration{
		ID:   name,
		Name: name,
		Port: port,
	}
	return c.consul.Agent().ServiceRegister(reg)
}

// DeRegister a service with consul local agent
func (c *client) DeRegister(id string) error {
	return c.consul.Agent().ServiceDeregister(id)
}

// Service return a service 
func (c *client) Service(service, tag string) ([]*ServiceEntry, *QueryMeta, error) {
	passingOnly := true 
	addrs, meta, err := c.consul.Health().Service(service, tag, passingOnly, nil)
	if len(addrs) == 0 &amp;amp;&amp;amp; err == nil {
		return nil, fmt.Errorf(&amp;quot;service ( %s ) was not found&amp;quot;, service)
	}
	if err != nil {
		return nil, err
	}
	return addrs, meta, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we have consul running and we know how to interact with consul with golang. It is time to build .&lt;/p&gt;

&lt;p&gt;Also, if you have any question, feel free to ping me &lt;a href=&#34;https://twitter.com/varunksaini&#34;&gt;@varunksaini&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 4June</title>
      <link>http://varunksaini.com/weekly-reading-4June/</link>
      <pubDate>Sat, 04 Jun 2016 16:45:52 -0500</pubDate>
      
      <guid>http://varunksaini.com/weekly-reading-4June/</guid>
      <description>&lt;p&gt;Tracking my online article reading has been helpful so far. I am more aware about what to read and what not to read. I am no saving articles mindlessly to my &lt;strong&gt;Pocket&lt;/strong&gt; app. This week I read an article about &lt;strong&gt;reading and comprehending&lt;/strong&gt; &lt;a href=&#34;https://blog.todoist.com/2016/04/25/read-less-learn-more/&#34;&gt;read less learn more&lt;/a&gt;, TL;DR when we read mindlessly we don&amp;rsquo;t comprehend much, and we don&amp;rsquo;t learn much. So idea is to learn more and read less. Also I read books from my kindle queue this week. I am done reading 50% of &lt;a href=&#34;https://www.amazon.com/gp/product/B00OM9OKEC/ref=kinw_myk_ro_title&#34;&gt;&amp;reg;evolution (Phoenix Horizon Book 1)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. http://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf
2. https://www.oreilly.com/ideas/swarm-v-fleet-v-kubernetes-v-mesos
3. http://googletesting.blogspot.com/2016/05/flaky-tests-at-google-and-how-we.html?m=1
4. https://coreos.com/blog/torus-distributed-storage-by-coreos.html
5. https://medium.com/@francesc/go-tooling-in-action-eca6882ff3bc#.46jdwvs4h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. http://lifehacker.com/everything-you-need-to-stock-your-first-home-bar-1779335148
2. http://www.newyorker.com/business/currency/the-tech-booms-second-cities
3. https://medium.com/@billjordan1/the-quiet-crisis-unfolding-in-software-development-cffbdafbf450#.mcoq5tcc4
4. http://jacquesmattheij.com/ycs-basic-income-experiment
5. http://www.hanselman.com/blog/IsTechnologyKillingCuriosity.aspx
6. http://jvns.ca/blog/2016/05/29/three-ways-to-solve-hard-programming-problems/
7. https://blog.devmastery.com/how-to-win-the-coding-interview-71ae7102d685#.td3h8rhs5
8. https://blog.todoist.com/2016/04/25/read-less-learn-more/
9. http://yosefk.com/blog/evil-tip-avoid-easy-things.html
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>