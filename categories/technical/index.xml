<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical on Never stop learning...</title>
    <link>https://varunksaini.com/categories/technical/index.xml</link>
    <description>Recent content in Technical on Never stop learning...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://varunksaini.com/categories/technical/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>how to see assembly code for a go program</title>
      <link>https://varunksaini.com/posts/how-to-get-assembly-for-go-program/</link>
      <pubDate>Mon, 02 Jan 2017 18:38:12 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/how-to-get-assembly-for-go-program/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; makes it very easy to look at assembly code for a go program. You can use &lt;code&gt;go tool compile&lt;/code&gt; or &lt;code&gt;go build&lt;/code&gt; with &lt;code&gt;gcflags&lt;/code&gt; to print the assembly on stdout.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat hello.go
package main

import &amp;quot;fmt&amp;quot;

func main() {
        fmt.Println(&amp;quot;Hello, Assembly!&amp;quot;)
}

$ go build -gcflags -S hello.go
# command-line-arguments
&amp;quot;&amp;quot;.main t=1 size=179 args=0x0 locals=0x58
        0x0000 00000 (hello.go:5)  TEXT    &amp;quot;&amp;quot;.main(SB), $88-0
        0x0000 00000 (hello.go:5)  MOVQ    (TLS), CX
        0x0009 00009 (hello.go:5)  CMPQ    SP, 16(CX)
        0x000d 00013 (hello.go:5)  JLS     169
        0x0013 00019 (hello.go:5)  SUBQ    $88, SP
        0x0017 00023 (hello.go:5)  MOVQ    BP, 80(SP)
        0x001c 00028 (hello.go:5)  LEAQ    80(SP), BP
        0x0021 00033 (hello.go:5)  FUNCDATA        $0, gclocals·69c1753bd5f81501d95132d08af04464(SB)
        0x0021 00033 (hello.go:5)  FUNCDATA        $1, gclocals·e29b39dba2f7b47ee8f21f123fdd2633(SB)
        0x0021 00033 (hello.go:6)  LEAQ    go.string.&amp;quot;Hello, Assembly!&amp;quot;(SB), AX
        0x0028 00040 (hello.go:6)  MOVQ    AX, &amp;quot;&amp;quot;.autotmp_0+64(SP)
        0x002d 00045 (hello.go:6)  MOVQ    $16, &amp;quot;&amp;quot;.autotmp_0+72(SP)
        0x0036 00054 (hello.go:6)  MOVQ    $0, &amp;quot;&amp;quot;.autotmp_4+48(SP)
        0x003f 00063 (hello.go:6)  MOVQ    $0, &amp;quot;&amp;quot;.autotmp_4+56(SP)
        0x0048 00072 (hello.go:6)  LEAQ    type.string(SB), AX
        0x004f 00079 (hello.go:6)  MOVQ    AX, (SP)
        0x0053 00083 (hello.go:6)  LEAQ    &amp;quot;&amp;quot;.autotmp_0+64(SP), AX
        0x0058 00088 (hello.go:6)  MOVQ    AX, 8(SP)
        0x005d 00093 (hello.go:6)  MOVQ    $0, 16(SP)
        0x0066 00102 (hello.go:6)  PCDATA  $0, $1
        0x0066 00102 (hello.go:6)  CALL    runtime.convT2E(SB)
        0x006b 00107 (hello.go:6)  MOVQ    32(SP), AX
        0x0070 00112 (hello.go:6)  MOVQ    24(SP), CX
        0x0075 00117 (hello.go:6)  MOVQ    CX, &amp;quot;&amp;quot;.autotmp_4+48(SP)
        0x007a 00122 (hello.go:6)  MOVQ    AX, &amp;quot;&amp;quot;.autotmp_4+56(SP)
        0x007f 00127 (hello.go:6)  LEAQ    &amp;quot;&amp;quot;.autotmp_4+48(SP), AX
        0x0084 00132 (hello.go:6)  MOVQ    AX, (SP)
        0x0088 00136 (hello.go:6)  MOVQ    $1, 8(SP)
        0x0091 00145 (hello.go:6)  MOVQ    $1, 16(SP)
        0x009a 00154 (hello.go:6)  PCDATA  $0, $1
        0x009a 00154 (hello.go:6)  CALL    fmt.Println(SB)
        0x009f 00159 (hello.go:7)  MOVQ    80(SP), BP
        0x00a4 00164 (hello.go:7)  ADDQ    $88, SP
        0x00a8 00168 (hello.go:7)  RET
        0x00a9 00169 (hello.go:7)  NOP
        0x00a9 00169 (hello.go:5)  CALL    runtime.morestack_noctxt(SB)
        0x00ae 00174 (hello.go:5)  JMP     0
        0x0000 65 48 8b 0c 25 00 00 00 00 48 3b 61 10 0f 86 96  eH..%....H;a....
        0x0010 00 00 00 48 83 ec 58 48 89 6c 24 50 48 8d 6c 24  ...H..XH.l$PH.l$
        0x0020 50 48 8d 05 00 00 00 00 48 89 44 24 40 48 c7 44  PH......H.D$@H.D
        0x0030 24 48 10 00 00 00 48 c7 44 24 30 00 00 00 00 48  $H....H.D$0....H
        0x0040 c7 44 24 38 00 00 00 00 48 8d 05 00 00 00 00 48  .D$8....H......H
        0x0050 89 04 24 48 8d 44 24 40 48 89 44 24 08 48 c7 44  ..$H.D$@H.D$.H.D
        0x0060 24 10 00 00 00 00 e8 00 00 00 00 48 8b 44 24 20  $..........H.D$
        0x0070 48 8b 4c 24 18 48 89 4c 24 30 48 89 44 24 38 48  H.L$.H.L$0H.D$8H
        0x0080 8d 44 24 30 48 89 04 24 48 c7 44 24 08 01 00 00  .D$0H..$H.D$....
        0x0090 00 48 c7 44 24 10 01 00 00 00 e8 00 00 00 00 48  .H.D$..........H
        0x00a0 8b 6c 24 50 48 83 c4 58 c3 e8 00 00 00 00 e9 4d  .l$PH..X.......M
        0x00b0 ff ff ff                                         ...
        rel 5+4 t=15 TLS+0
        rel 36+4 t=14 go.string.&amp;quot;Hello, Assembly!&amp;quot;+0
        rel 75+4 t=14 type.string+0
        rel 103+4 t=7 runtime.convT2E+0
        rel 155+4 t=7 fmt.Println+0
        rel 170+4 t=7 runtime.morestack_noctxt+0
&amp;quot;&amp;quot;.init t=1 size=61 args=0x0 locals=0x0
        0x0000 00000 (hello.go:8)  TEXT    &amp;quot;&amp;quot;.init(SB), $0-0
        0x0000 00000 (hello.go:8)  MOVQ    (TLS), CX
        0x0009 00009 (hello.go:8)  CMPQ    SP, 16(CX)
        0x000d 00013 (hello.go:8)  JLS     54
        0x000f 00015 (hello.go:8)  NOP
        0x000f 00015 (hello.go:8)  NOP
        0x000f 00015 (hello.go:8)  FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
        0x000f 00015 (hello.go:8)  FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
        0x000f 00015 (hello.go:8)  MOVBLZX &amp;quot;&amp;quot;.initdone·(SB), AX
        0x0016 00022 (hello.go:8)  CMPB    AL, $1
        0x0018 00024 (hello.go:8)  JLS     $0, 27
        0x001a 00026 (hello.go:8)  RET
        0x001b 00027 (hello.go:8)  JNE     $0, 34
        0x001d 00029 (hello.go:8)  PCDATA  $0, $0
        0x001d 00029 (hello.go:8)  CALL    runtime.throwinit(SB)
        0x0022 00034 (hello.go:8)  MOVB    $1, &amp;quot;&amp;quot;.initdone·(SB)
        0x0029 00041 (hello.go:8)  PCDATA  $0, $0
        0x0029 00041 (hello.go:8)  CALL    fmt.init(SB)
        0x002e 00046 (hello.go:8)  MOVB    $2, &amp;quot;&amp;quot;.initdone·(SB)
        0x0035 00053 (hello.go:8)  RET
        0x0036 00054 (hello.go:8)  NOP
        0x0036 00054 (hello.go:8)  CALL    runtime.morestack_noctxt(SB)
        0x003b 00059 (hello.go:8)  JMP     0
        0x0000 65 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 27 0f  eH..%....H;a.v&#39;.
        0x0010 b6 05 00 00 00 00 3c 01 76 01 c3 75 05 e8 00 00  ......&amp;lt;.v..u....
        0x0020 00 00 c6 05 00 00 00 00 01 e8 00 00 00 00 c6 05  ................
        0x0030 00 00 00 00 02 c3 e8 00 00 00 00 eb c3           .............
        rel 5+4 t=15 TLS+0
        rel 18+4 t=14 &amp;quot;&amp;quot;.initdone·+0
        rel 30+4 t=7 runtime.throwinit+0
        rel 36+4 t=14 &amp;quot;&amp;quot;.initdone·+-1
        rel 42+4 t=7 fmt.init+0
        rel 48+4 t=14 &amp;quot;&amp;quot;.initdone·+-1
        rel 55+4 t=7 runtime.morestack_noctxt+0
go.string.hdr.&amp;quot;Hello, Assembly!&amp;quot; t=9 dupok size=16
        0x0000 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
        rel 0+8 t=1 go.string.&amp;quot;Hello, Assembly!&amp;quot;+0
go.string.&amp;quot;Hello, Assembly!&amp;quot; t=9 dupok size=16
        0x0000 48 65 6c 6c 6f 2c 20 41 73 73 65 6d 62 6c 79 21  Hello, Assembly!
gclocals·e29b39dba2f7b47ee8f21f123fdd2633 t=9 dupok size=16
        0x0000 02 00 00 00 04 00 00 00 00 00 00 00 07 00 00 00  ................
gclocals·69c1753bd5f81501d95132d08af04464 t=9 dupok size=8
        0x0000 02 00 00 00 00 00 00 00                          ........
gclocals·33cdeccccebe80329f1fdbee7f5874cb t=9 dupok size=8
        0x0000 01 00 00 00 00 00 00 00                          ........
&amp;quot;&amp;quot;.initdone· t=34 size=1
&amp;quot;&amp;quot;.main·f t=9 dupok size=8
        0x0000 00 00 00 00 00 00 00 00                          ........
        rel 0+8 t=1 &amp;quot;&amp;quot;.main+0
&amp;quot;&amp;quot;.init·f t=9 dupok size=8
        0x0000 00 00 00 00 00 00 00 00                          ........
        rel 0+8 t=1 &amp;quot;&amp;quot;.init+0
runtime.gcbits.03 t=9 dupok size=1
        0x0000 03                                               .
type..namedata.*interface {}. t=9 dupok size=16
        0x0000 00 00 0d 2a 69 6e 74 65 72 66 61 63 65 20 7b 7d  ...*interface {}
type.interface {} t=9 dupok size=80
        0x0000 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
        0x0010 e7 57 a0 18 02 08 08 14 00 00 00 00 00 00 00 00  .W..............
        0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        0x0040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        rel 24+8 t=1 runtime.algarray+144
        rel 32+8 t=1 runtime.gcbits.03+0
        rel 40+4 t=5 type..namedata.*interface {}.+0
        rel 56+8 t=1 type.interface {}+80
runtime.gcbits.01 t=9 dupok size=1
        0x0000 01                                               .
type..namedata.*[]interface {}. t=9 dupok size=18
        0x0000 00 00 0f 2a 5b 5d 69 6e 74 65 72 66 61 63 65 20  ...*[]interface
        0x0010 7b 7d                                            {}
type.[]interface {} t=9 dupok size=56
        0x0000 18 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
        0x0010 70 93 ea 2f 02 08 08 17 00 00 00 00 00 00 00 00  p../............
        0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        0x0030 00 00 00 00 00 00 00 00                          ........
        rel 24+8 t=1 runtime.algarray+0
        rel 32+8 t=1 runtime.gcbits.01+0
        rel 40+4 t=5 type..namedata.*[]interface {}.+0
        rel 48+8 t=1 type.interface {}+0
go.typelink.[]interface {} t=9 dupok size=4
        0x0000 00 00 00 00                                      ....
        rel 0+4 t=5 type.[]interface {}+0
type..namedata.*[1]interface {}. t=9 dupok size=19
        0x0000 00 00 10 2a 5b 31 5d 69 6e 74 65 72 66 61 63 65  ...*[1]interface
        0x0010 20 7b 7d                                          {}
type.[1]interface {} t=9 dupok size=72
        0x0000 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
        0x0010 50 91 5b fa 02 08 08 11 00 00 00 00 00 00 00 00  P.[.............
        0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        0x0040 01 00 00 00 00 00 00 00                          ........
        rel 24+8 t=1 runtime.algarray+144
        rel 32+8 t=1 runtime.gcbits.03+0
        rel 40+4 t=5 type..namedata.*[1]interface {}.+0
        rel 48+8 t=1 type.interface {}+0
        rel 56+8 t=1 type.[]interface {}+0
go.typelink.[1]interface {} t=9 dupok size=4
        0x0000 00 00 00 00                                      ....
        rel 0+4 t=5 type.[1]interface {}+0
type.*[1]interface {} t=9 dupok size=56
        0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
        0x0010 bf 03 a8 35 00 08 08 36 00 00 00 00 00 00 00 00  ...5...6........
        0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        0x0030 00 00 00 00 00 00 00 00                          ........
        rel 24+8 t=1 runtime.algarray+80
        rel 32+8 t=1 runtime.gcbits.01+0
        rel 40+4 t=5 type..namedata.*[1]interface {}.+0
        rel 48+8 t=1 type.[1]interface {}+0
go.typelink.*[1]interface {} t=9 dupok size=4
        0x0000 00 00 00 00                                      ....
        rel 0+4 t=5 type.*[1]interface {}+0
type..importpath.fmt. t=9 dupok size=6
        0x0000 00 00 03 66 6d 74                                ...fmt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For detailed info, read &lt;a href=&#34;https://golang.org/doc/asm&#34;&gt;A Quick Guide to Go&amp;rsquo;s Assembler&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>var block changed to init function in assembly</title>
      <link>https://varunksaini.com/posts/var-changed-to-init-in-assembly/</link>
      <pubDate>Wed, 28 Dec 2016 14:29:42 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/var-changed-to-init-in-assembly/</guid>
      <description>&lt;p&gt;TIL - &lt;a href=&#34;https://golang.org&#34;&gt;go&lt;/a&gt; turns a var block in init function behind the scenes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

var (
	testError1 = fmt.Errorf(&amp;quot;%s &amp;quot;, &amp;quot;I am error one&amp;quot;)
	testError2 = fmt.Errorf(&amp;quot;%s &amp;quot;, &amp;quot;I am error two&amp;quot;)
)

func main() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if you look at the assembly code below, you will see that we have &lt;code&gt;.main&lt;/code&gt; and &lt;code&gt;.init&lt;/code&gt;. &lt;code&gt;.init&lt;/code&gt; function has &lt;code&gt;0x0049 00073 (/Users/vakumar/temp/test.go:6)    LEAQ    go.string.&amp;quot;I am error one&amp;quot;(SB), AX&lt;/code&gt; which is in &lt;code&gt;var block&lt;/code&gt; in my go code above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;.main t=1 size=1 args=0x0 locals=0x0
        0x0000 00000 (/Users/vakumar/temp/test.go:10)   TEXT    &amp;quot;&amp;quot;.main(SB), $0-0
        0x0000 00000 (/Users/vakumar/temp/test.go:10)   NOP
        0x0000 00000 (/Users/vakumar/temp/test.go:10)   NOP
        0x0000 00000 (/Users/vakumar/temp/test.go:10)   FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
        0x0000 00000 (/Users/vakumar/temp/test.go:10)   FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
        0x0000 00000 (/Users/vakumar/temp/test.go:10)   RET
        0x0000 c3                                               .
&amp;quot;&amp;quot;.init t=1 size=605 args=0x0 locals=0x70
        0x0000 00000 (/Users/vakumar/temp/test.go:11)   TEXT    &amp;quot;&amp;quot;.init(SB), $112-0
        0x0000 00000 (/Users/vakumar/temp/test.go:11)   MOVQ    (TLS), CX
        0x0009 00009 (/Users/vakumar/temp/test.go:11)   CMPQ    SP, 16(CX)
        0x000d 00013 (/Users/vakumar/temp/test.go:11)   JLS     595
        0x0013 00019 (/Users/vakumar/temp/test.go:11)   SUBQ    $112, SP
        0x0017 00023 (/Users/vakumar/temp/test.go:11)   MOVQ    BP, 104(SP)
        0x001c 00028 (/Users/vakumar/temp/test.go:11)   LEAQ    104(SP), BP
        0x0021 00033 (/Users/vakumar/temp/test.go:11)   FUNCDATA        $0, gclocals·3e27b3aa6b89137cce48b3379a2a6610(SB)
        0x0021 00033 (/Users/vakumar/temp/test.go:11)   FUNCDATA        $1, gclocals·3672590320383b7a4beab9e3e42e1c00(SB)
        0x0021 00033 (/Users/vakumar/temp/test.go:11)   MOVBLZX &amp;quot;&amp;quot;.initdone·(SB), AX
        0x0028 00040 (/Users/vakumar/temp/test.go:11)   CMPB    AL, $1
        0x002a 00042 (/Users/vakumar/temp/test.go:11)   JLS     $0, 54
        0x002c 00044 (/Users/vakumar/temp/test.go:11)   MOVQ    104(SP), BP
        0x0031 00049 (/Users/vakumar/temp/test.go:11)   ADDQ    $112, SP
        0x0035 00053 (/Users/vakumar/temp/test.go:11)   RET
        0x0036 00054 (/Users/vakumar/temp/test.go:11)   JNE     $0, 61
        0x0038 00056 (/Users/vakumar/temp/test.go:11)   PCDATA  $0, $0
        0x0038 00056 (/Users/vakumar/temp/test.go:11)   CALL    runtime.throwinit(SB)
        0x003d 00061 (/Users/vakumar/temp/test.go:11)   MOVB    $1, &amp;quot;&amp;quot;.initdone·(SB)
        0x0044 00068 (/Users/vakumar/temp/test.go:11)   PCDATA  $0, $0
        0x0044 00068 (/Users/vakumar/temp/test.go:11)   CALL    fmt.init(SB)
        0x0049 00073 (/Users/vakumar/temp/test.go:6)    LEAQ    go.string.&amp;quot;I am error one&amp;quot;(SB), AX
        0x0050 00080 (/Users/vakumar/temp/test.go:6)    MOVQ    AX, &amp;quot;&amp;quot;.autotmp_0+88(SP)
        0x0055 00085 (/Users/vakumar/temp/test.go:6)    MOVQ    $14, &amp;quot;&amp;quot;.autotmp_0+96(SP)
        0x005e 00094 (/Users/vakumar/temp/test.go:6)    LEAQ    type.[1]interface {}(SB), AX
        0x0065 00101 (/Users/vakumar/temp/test.go:6)    MOVQ    AX, (SP)
        0x0069 00105 (/Users/vakumar/temp/test.go:6)    PCDATA  $0, $1
        0x0069 00105 (/Users/vakumar/temp/test.go:6)    CALL    runtime.newobject(SB)
        0x006e 00110 (/Users/vakumar/temp/test.go:6)    MOVQ    8(SP), AX
        0x0073 00115 (/Users/vakumar/temp/test.go:6)    MOVQ    AX, &amp;quot;&amp;quot;.autotmp_8+64(SP)
        0x0078 00120 (/Users/vakumar/temp/test.go:6)    LEAQ    type.string(SB), CX
        0x007f 00127 (/Users/vakumar/temp/test.go:6)    MOVQ    CX, (SP)
        0x0083 00131 (/Users/vakumar/temp/test.go:6)    LEAQ    &amp;quot;&amp;quot;.autotmp_0+88(SP), DX
        0x0088 00136 (/Users/vakumar/temp/test.go:6)    MOVQ    DX, 8(SP)
        0x008d 00141 (/Users/vakumar/temp/test.go:6)    MOVQ    $0, 16(SP)
        0x0096 00150 (/Users/vakumar/temp/test.go:6)    PCDATA  $0, $2
        0x0096 00150 (/Users/vakumar/temp/test.go:6)    CALL    runtime.convT2E(SB)
        0x009b 00155 (/Users/vakumar/temp/test.go:6)    MOVQ    32(SP), AX
        0x00a0 00160 (/Users/vakumar/temp/test.go:6)    MOVQ    24(SP), CX
        0x00a5 00165 (/Users/vakumar/temp/test.go:6)    MOVQ    &amp;quot;&amp;quot;.autotmp_8+64(SP), DX
        0x00aa 00170 (/Users/vakumar/temp/test.go:6)    MOVQ    CX, (DX)
        0x00ad 00173 (/Users/vakumar/temp/test.go:6)    MOVL    runtime.writeBarrier(SB), CX
        0x00b3 00179 (/Users/vakumar/temp/test.go:6)    TESTB   CL, CL
        0x00b5 00181 (/Users/vakumar/temp/test.go:6)    JNE     $0, 567
        0x00bb 00187 (/Users/vakumar/temp/test.go:6)    MOVQ    AX, 8(DX)
        0x00bf 00191 (/Users/vakumar/temp/test.go:6)    LEAQ    go.string.&amp;quot;%s &amp;quot;(SB), AX
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>how do you write error statement</title>
      <link>https://varunksaini.com/posts/how-do-you-write-error-statement/</link>
      <pubDate>Thu, 22 Dec 2016 12:48:00 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/how-do-you-write-error-statement/</guid>
      <description>&lt;p&gt;In go, when I write an error statement, I don&amp;rsquo;t keep any space between function call and error check statement, such as -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;something, err := doSoemthing()
if err != nil {
	//handle error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I have also seen people doing following -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;something, err := doSoemthing()

if err != nil {
	//handle error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How do you write that error check?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go puzzlers and thoughts</title>
      <link>https://varunksaini.com/posts/golang-puzzlers-and-thoughts/</link>
      <pubDate>Sun, 04 Dec 2016 07:15:59 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/golang-puzzlers-and-thoughts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/&#34;&gt;Dave Cheney&lt;/a&gt; gave a talk on &lt;a href=&#34;http://golang.org&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;https://talks.godoc.org/github.com/davecheney/presentations/gopher-puzzlers.slide#1&#34;&gt;puzzlers&lt;/a&gt;. It is a great talk and I encourage you to give it a good read.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    m := make(map[string]int)
    m[&amp;quot;foo&amp;quot;]++
    fmt.Println(m[&amp;quot;foo&amp;quot;])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Zero Values:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dave asks &amp;ldquo;Is it going to compile and if yes, what will be the output&amp;rdquo;? If you look closely, it is related to &lt;a href=&#34;https://golang.org/ref/spec#The_zero_value&#34;&gt;zero value&lt;/a&gt; for a type. When we initialize &lt;code&gt;m := make(map[string]int)&lt;/code&gt;, both string and int gets &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; values respectively. So increment works as usual.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    m := map[string]int{}
    m[&amp;quot;foo&amp;quot;]++
    fmt.Println(m[&amp;quot;foo&amp;quot;])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will also work as literal map declaration is same as using &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiple init():&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func init() {}
func init() {}

func main() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will this compile?&lt;/p&gt;

&lt;p&gt;Yes, because init(), init() can appear multiple times in a package. Any other multiple function declarations will fail.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func foo() {}
func foo() {}

func main() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fails with &lt;code&gt;foo redeclared in this block&lt;/code&gt;. &lt;a href=&#34;https://play.golang.org/p/czghNc45Nd&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If there are multiple init() in a package, they are called in the order they are declared. Also you can&amp;rsquo;t make an explicit call to &lt;code&gt;init()&lt;/code&gt; in your code, it will fail.&lt;/p&gt;

&lt;p&gt;More info on &lt;a href=&#34;https://golang.org/doc/effective_go.html#init&#34;&gt;init()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;panic messages are written to &lt;code&gt;os.Stderr&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;language keywords such as &lt;code&gt;default&lt;/code&gt; etc. should not be used as an identifier. &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; are predeclared identifiers. Predeclared identifiers are at universe block, so you can can shadow them inside smaller scopes, including the package block. But don&amp;rsquo;t shadow predeclared identifiers as it will make code less readable and error prone.&lt;/p&gt;

&lt;p&gt;There are many more puzzles in Dave&amp;rsquo;s slide. Go have a read.&lt;/p&gt;

&lt;p&gt;Note - The code examples here are used from Dave&amp;rsquo;s talk. My intention is to solve and think about some puzzles here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aeon newsletter Nov262016</title>
      <link>https://varunksaini.com/posts/aeon-newsletter-Nov262016/</link>
      <pubDate>Sat, 26 Nov 2016 06:05:16 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/aeon-newsletter-Nov262016/</guid>
      <description>&lt;p&gt;I get &lt;a href=&#34;https://aeon.co&#34;&gt;Aeon&lt;/a&gt; magazine newsletter every weekend. They generally have some good article that I end up reading. In my quest to log what I read and watch here at my blog, today I am going to write about Aeon newsletter. I will only be writing what I read.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Does &lt;strong&gt;Work mean everything to us&lt;/strong&gt;, That is the question author is asking in &lt;a href=&#34;https://aeon.co/essays/what-if-jobs-are-not-the-solution-but-the-problem&#34;&gt;Fuck Work&lt;/a&gt;, an article I read in &lt;a href=&#34;https://aeon.co&#34;&gt;Aeon&lt;/a&gt;. From very long time we have been believing that work is necessary to build human nature. Author asks what if we stop working. He also talks about inequality in job markets.
This article got popular and is in &lt;a href=&#34;https://news.ycombinator.com/item?id=13037810&#34;&gt;Hacker News&lt;/a&gt;. Lots of interesting comments in hacker news threads.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How some Chinese moving to mountains to get out of daily grind in big cities. They live a life of hermit there, they read and meditate. This video talks about how important it is to take a break and find the piece of mind. The video is in Chinese but has English subtitles.
&lt;a href=&#34;https://aeon.co/videos/why-some-chinese-millennials-are-taking-up-the-hermit-s-life-in-the-mountains&#34;&gt;video&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Leonard Cohen&amp;rsquo;s poem that talks about dreams and being sleepless. Very interesting and thought provoking.
&lt;a href=&#34;https://aeon.co/videos/leonard-cohen-turns-an-erotic-fantasy-that-wasn-t-into-a-sleepless-night-s-dream&#34;&gt;video&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Alan Kay interview by Joe Armstrong</title>
      <link>https://varunksaini.com/posts/Alan-Kay-Joe-Armstrong/</link>
      <pubDate>Fri, 25 Nov 2016 20:47:08 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/Alan-Kay-Joe-Armstrong/</guid>
      <description>&lt;p&gt;I watched this great &lt;a href=&#34;https://www.youtube.com/watch?v=fhOHn9TClXY&#34;&gt;video&lt;/a&gt; where &lt;a href=&#34;http://joearms.github.io/&#34;&gt;Joe Armstrong&lt;/a&gt; interviews &lt;a href=&#34;https://en.wikipedia.org/wiki/Alan_Kay&#34;&gt;Alan Kay&lt;/a&gt;. This is a great video and both Alan Kay and Joe Armstrong talk about some real issues in current computer science. They both are not fond of &lt;strong&gt;cloud&lt;/strong&gt; and &lt;strong&gt;internet of things&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Both Alan Kay and Joe Armstrong want computer science people to understand history and build things that matter. They don&amp;rsquo;t want people to do things just for the sake of doing them(I am looking at you Javascript frameworks). According to them, we need to think as real scientists and use scientific methods to solve problems. Also Alan Kay recommends a lots of great books to read in this interview.&lt;/p&gt;

&lt;p&gt;Following are some quotes from interview:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The best way to predict the future is to invent it.&lt;/p&gt;

&lt;p&gt;Inverse Vandalism.&lt;/p&gt;

&lt;p&gt;Not Big Data, but Big meaning.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>question about type assertion in go</title>
      <link>https://varunksaini.com/posts/question-about-type-assertion/</link>
      <pubDate>Wed, 23 Nov 2016 09:47:56 -0600</pubDate>
      
      <guid>https://varunksaini.com/posts/question-about-type-assertion/</guid>
      <description>&lt;p&gt;One of our go app crashed recently because of a bug in &lt;a href=&#34;https://github.com/urfave/cli/&#34;&gt;https://github.com/urfave/cli/&lt;/a&gt;, here is the &lt;a href=&#34;https://github.com/urfave/cli/pull/568&#34;&gt;PR&lt;/a&gt; with fix from my collegue who found the issue. Then we started talking about it internally and found something that&amp;rsquo;s interesting. I understand some of it but not fully so I thought of asking people who might know.&lt;/p&gt;

&lt;p&gt;My question is why &lt;code&gt;bar&lt;/code&gt; works but not &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

func main() {
	var f interface{}
	var b interface{}
	f = foo()
	b = bar()

	if _, ok := f.(func(string) error); ok {
		fmt.Println(&amp;quot;FOUND IT&amp;quot;)
	} else {
		fmt.Println(&amp;quot;DIDNT FIND IT&amp;quot;)
	}

	if _, ok := b.(func(string) error); ok {
		fmt.Println(&amp;quot;FOUND IT&amp;quot;)
	} else {
		fmt.Println(&amp;quot;DIDNT FIND IT&amp;quot;)
	}
}

type FooFunc func(string) error

func foo() func(string) error {
	return func(e string) error {
		return fmt.Errorf(&amp;quot;GOTCHA&amp;quot;)
	}
}

func bar() FooFunc {
	return func(e string) error {
		return fmt.Errorf(&amp;quot;GOTCHA&amp;quot;)
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/4EfYIMZV-p&#34;&gt;go playground&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using if condition in a defer statement</title>
      <link>https://varunksaini.com/posts/using-if-in-defer/</link>
      <pubDate>Tue, 01 Nov 2016 21:10:59 -0500</pubDate>
      
      <guid>https://varunksaini.com/posts/using-if-in-defer/</guid>
      <description>&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; statement is used to do basic cleanup in go, deferred calls are executed when surrounding function returns.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f, err := os.Open(fileName)
    if err != nil {
        return
    }
defer src.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We open a file and then use &lt;code&gt;defer&lt;/code&gt; to close the file handle. Using &lt;code&gt;defer&lt;/code&gt; makes sure that file handle is closed and we don&amp;rsquo;t have any bug in our code.But what if we want to make a decision(conditional) in &lt;code&gt;defer&lt;/code&gt;, is that possible?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;named returns&lt;/code&gt; to rescue. Here we are using a form of defer that lets us do something if there is an error and something else if there is not an error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;errors&amp;quot;
	&amp;quot;fmt&amp;quot;
)

var toggleMe = true

func foo() (boo string, err error) {
	boo = &amp;quot;boo&amp;quot;

	defer func() {
		if err != nil {
			fmt.Printf(boo)
		} else {
			fmt.Println(&amp;quot;bar&amp;quot;)
		}
	}()

	if toggleMe {
		err = errors.New(&amp;quot;an error occurred&amp;quot;)
	}

	return
}

func main() {
	foo()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/ap_zkRpcqQ&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if it is idiomatic go or not and that&amp;rsquo;s where I need your help, let me know if this is correct to do.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>how not to handle errors in golang</title>
      <link>https://varunksaini.com/posts/how-not-to-handle-errors-in-golang/</link>
      <pubDate>Thu, 27 Oct 2016 10:40:33 -0500</pubDate>
      
      <guid>https://varunksaini.com/posts/how-not-to-handle-errors-in-golang/</guid>
      <description>&lt;p&gt;People have a love and hate relationship with golang error handling. Golang&amp;rsquo;s use to return values for error handling seems to have as many detractors as admirers. In golang, errors are of immediate interest, so you handle them then and there, so it very common to see code like this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var user User
err := json.Marshal(data, &amp;amp;user)
if err != nil {
	return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a large code base, you see &lt;code&gt;if err != nil&lt;/code&gt; a lot. So people find ways to minimize that, one such approach is creating a common &lt;code&gt;util&lt;/code&gt; package and then create common convenience error functions such as -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func FailIfNil(t *testing.T, i interface{}) {
	if IsNil(i) {
		//handle error here
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These common functions seems helpful, but again, in a large code base, they get out of hand quickly. Debugging becomes difficult.&lt;/p&gt;

&lt;p&gt;My suggestion would be handle errors when and where you see them. keep things simple and readable. Also if you want to do something with your errors, use a good library such as &lt;a href=&#34;https://github.com/davecheney/errors&#34;&gt;this&lt;/a&gt; one from &lt;a href=&#34;http://dave.cheney.net/&#34;&gt;Dave Cheney&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>remove big file from git repo</title>
      <link>https://varunksaini.com/posts/remove-big-file-from-git-repo/</link>
      <pubDate>Sat, 22 Oct 2016 07:35:43 -0500</pubDate>
      
      <guid>https://varunksaini.com/posts/remove-big-file-from-git-repo/</guid>
      <description>&lt;p&gt;Sometimes you push a big binary/text(etc.) file to your git repo and these files stay in your git history. Your repo size go to roof and it takes time to clone that repo, which is a big pain. One of my git repo at work had a big binary(logstash deb file) in history and it was inflating the repo size to over 80mb. So I thought of cleaning the repo and bring down the size. I am sure there are many ways to do it but I am going to write down what I did so somebody else can also benefit.&lt;/p&gt;

&lt;p&gt;I used a tool called &lt;strong&gt;BFG Repo cleaner&lt;/strong&gt;. BFG cleans bad data from git repo. BFG can be downloaded &lt;a href=&#34;http://repo1.maven.org/maven2/com/madgag/bfg/1.12.13/bfg-1.12.13.jar&#34;&gt;here&lt;/a&gt; and provides a comprehensive list of option to clean git repo. It is an alternative to &lt;code&gt;git-filter-branch&lt;/code&gt;, which I have no idea about.&lt;/p&gt;

&lt;p&gt;To use BFG on a git repo follow these steps:&lt;/p&gt;

&lt;p&gt;First clone a fresh copy of your repo, using the &lt;code&gt;--mirror&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone --mirror git://github.com/big-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the BFG to clean any big file that has a size greater then 100mb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -jar bfg.jar --strip-blobs-bigger-than 100M big-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you know the name of file, you can give the name too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -jar bfg.jar --delete-files file_name  big-repo.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After running the command above, BFG will update your commits and all branches and tags so they are clean, but it doesn&amp;rsquo;t physically delete the unwanted stuff. Examine the repo to make sure your history has been updated, and then use the standard &lt;code&gt;git gc&lt;/code&gt; command to strip out the unwanted dirty data, which Git will now recognise as surplus to requirements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd big-repo 
$ git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now --aggressive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, once you&amp;rsquo;re happy with the updated state of your repo, push it back up (note that because your clone command used the &lt;code&gt;--mirror&lt;/code&gt; flag, this push will update all refs on your remote server):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you push new and clean history to your repo, ditch old copies of the repo and then fresh clone/fork. Delete the old clones as they have dirty history, if you have some PR&amp;rsquo;s, fetch them from master or cherry pick the commits you want.&lt;/p&gt;

&lt;p&gt;After all these your repo size should be significantly lower. In my case, I brought the size down from 82mb to 4.1mb.&lt;/p&gt;

&lt;p&gt;Let me know if you have any question or suggestions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>laptop repair</title>
      <link>https://varunksaini.com/posts/laptop-repair/</link>
      <pubDate>Sat, 13 Aug 2016 10:26:10 -0500</pubDate>
      
      <guid>https://varunksaini.com/posts/laptop-repair/</guid>
      <description>&lt;p&gt;I haven&amp;rsquo;t published anything on my blog because my personal laptop was having some issues. It is a mid 2012 retina Macbook Pro and I have it from last 4 years. It was &lt;code&gt;kernel panicking&lt;/code&gt; and restarting every 5 minutes or so. I took it to Apple store and they ran some hardware tests. First they reinstalled the operating system and it did not help. I took it back for repair and they replaced the &lt;code&gt;logic board&lt;/code&gt;. Apple charged a flat fee of &lt;code&gt;$310 + tax&lt;/code&gt; for repairs. After repairs, laptop is working fine and I should be back to blooging now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>good read on golang and generics</title>
      <link>https://varunksaini.com/posts/good-read-on-golang-and-generics/</link>
      <pubDate>Sun, 17 Jul 2016 06:57:00 -0500</pubDate>
      
      <guid>https://varunksaini.com/posts/good-read-on-golang-and-generics/</guid>
      <description>&lt;p&gt;Generics in Golang is a topic that everybody loves to talk :). There have been lots of articles on golang and generics such as &lt;a href=&#34;http://blog.jonathanoliver.com/golang-has-generics/&#34;&gt;this&lt;/a&gt;, &lt;a href=&#34;http://bouk.co/blog/idiomatic-generics-in-go/&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;http://blog.ralch.com/tutorial/golang-code-generation-and-generics/&#34;&gt;this&lt;/a&gt;. You can see it is a favorite topics of golang developers to talk about (My team personally discuss lack of generics in golang at least once a week).&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&#34;https://appliedgo.net/generics/&#34;&gt;this&lt;/a&gt; article about generics on reddit and found it very informative. I hope this is helpful to you as I found it helpful for me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 19July</title>
      <link>https://varunksaini.com/posts/weekly-reading-19July/</link>
      <pubDate>Sat, 16 Jul 2016 06:25:13 -0500</pubDate>
      
      <guid>https://varunksaini.com/posts/weekly-reading-19July/</guid>
      <description>&lt;p&gt;This is what I read this week. Mostly technical and some documentation. I am not reading too many internet shared articles anymore. From next week I am thinking for refining it a bit more and add some context and date etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://jvns.ca/blog/2016/07/03/debugging-tools-i-love/&#34;&gt;http://jvns.ca/blog/2016/07/03/debugging-tools-i-love/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aeon.co/ideas/the-mind-isn-t-locked-in-the-brain-but-extends-far-beyond-it&#34;&gt;https://aeon.co/ideas/the-mind-isn-t-locked-in-the-brain-but-extends-far-beyond-it&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.confluent.io/1.0/index.html&#34;&gt;http://docs.confluent.io/1.0/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://peter.bourgon.org/blog/2016/07/11/context.html&#34;&gt;http://peter.bourgon.org/blog/2016/07/11/context.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://jamesclear.com/power-of-environment&#34;&gt;http://jamesclear.com/power-of-environment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.newyorker.com/culture/cultural-comment/headphones-everywhere&#34;&gt;http://www.newyorker.com/culture/cultural-comment/headphones-everywhere&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://spinroot.com/gerard/pdf/P10.pdf&#34;&gt;http://spinroot.com/gerard/pdf/P10.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;https://github.com/golang/go/wiki/CodeReviewComments&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>weekly reading 9July</title>
      <link>https://varunksaini.com/posts/weekly-reading-9July/</link>
      <pubDate>Sat, 09 Jul 2016 05:46:45 -0500</pubDate>
      
      <guid>https://varunksaini.com/posts/weekly-reading-9July/</guid>
      <description>&lt;p&gt;This week I didn&amp;rsquo;t read too many online articles. But still found some good technical articles that I read.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://videlalvaro.github.io/2015/02/programming-myths.html&#34;&gt;http://videlalvaro.github.io/2015/02/programming-myths.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The real problem is forming our opinion very quicky without thinking a bit and looking at the context. Are &amp;quot;Goto&amp;quot; really harmful in computer programming or it is just a myth. This Statement by Donanld Knuth summerise this whole article -
&amp;quot;We shouldn’t merely remove go to statements because it’s the fashionable thing to do; the presence or absence of go to statements is not really the issue.&amp;quot;

Some great quotes from article:

&amp;quot;we should strive most of all for a program that is easy to understand and almost sure to work&amp;quot;

&amp;quot;the universal experience of programmers who have been using measurement tools has been that their intuitive guesses fail.&amp;quot;

&amp;quot;premature optimization is the root of all evil&amp;quot;

&amp;quot;Experience indicates that nearly everybody has the wrong idea about the real bottlenecks in his programs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dominik.honnef.co/posts/2010/10/why_you_should_try_tmux_instead_of_screen/&#34;&gt;http://dominik.honnef.co/posts/2010/10/why_you_should_try_tmux_instead_of_screen/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmux rocks and I use it everyday with vim :)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7#.dii68tn9g&#34;&gt;https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7#.dii68tn9g&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/@johannes_gehrs/getting-started-with-systemd-on-debian-jessie-e024758ca63d#.7jy8vcfdu&#34;&gt;https://medium.com/@johannes_gehrs/getting-started-with-systemd-on-debian-jessie-e024758ca63d#.7jy8vcfdu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/&#34;&gt;https://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bash fifos and golang channel</title>
      <link>https://varunksaini.com/posts/bash-fifos-and-golang-channel/</link>
      <pubDate>Mon, 04 Jul 2016 22:05:36 -0500</pubDate>
      
      <guid>https://varunksaini.com/posts/bash-fifos-and-golang-channel/</guid>
      <description>&lt;p&gt;I have been reading about &lt;a href=&#34;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&#34;&gt;bash&lt;/a&gt; this weekend and came to know about &lt;a href=&#34;http://www.linuxjournal.com/content/using-named-pipes-fifos-bash&#34;&gt;FIFOs&lt;/a&gt;. After first glance I found similarities between &lt;code&gt;named pipes&lt;/code&gt; and &lt;code&gt;golang channel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FIFOs&lt;/code&gt; are created using the &lt;code&gt;mkfifo&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkfifo test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FIFOs&lt;/code&gt; provide a &lt;code&gt;named pipe&lt;/code&gt; to shuttle data from one place to another. If we create a FIFO and send some data to it, it will remain blocked forever, until a command tries to read from it. If you are familiar with golang and golang channels, that&amp;rsquo;s an &lt;a href=&#34;https://golang.org/doc/effective_go.html#channels&#34;&gt;Unbuffered/synchronous channel&lt;/a&gt;. Unbuffered channel blocks until there is a receiver receiving from a channel.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;named pipes&lt;/code&gt; are very interesting and can be used in some interesting ways.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>