<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Varun K Saini </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/posts/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Sun, 26 Apr 2015 07:40:00 -0600</updated>
    
    <item>
      <title>Pointer type in Go</title>
      <link>http://localhost:1313/posts/pointer_in_go/</link>
      <pubDate>Sun, 26 Apr 2015 07:40:00 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/pointer_in_go/</guid>
      <description>&lt;p&gt;Go has pointer but no pointer arithmatic. Go is strict about memory safety but sometime you need to get access to pointers. I am working on a task where I am porting some C code to Go. C code is using a lot of pointers and I wanted a way to replicate same in Go. Go has a package called &lt;a href=&#34;https://golang.org/pkg/unsafe/#Pointer&#34;&gt;unsafe&lt;/a&gt; and unsafe package provides a Pointer type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;unsafe&amp;quot;
)

func main() {
	type test struct{}
	var myTest = new(test)
	myPtr := unsafe.Pointer(myTest)
	fmt.Printf(&amp;quot;%T&amp;quot;, myPtr)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;myPtr&lt;/code&gt; is &amp;ldquo;unsafe.Pointer&amp;rdquo; type and if you want to use any operator or cast it to any other pointer, cast it to &lt;code&gt;uintptr&lt;/code&gt; first.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;unsafe&amp;quot;
)

func main() {
	type test struct{}
	var myTest = new(test)
	myPtr := unsafe.Pointer(myTest)

	newMyPtr := uint32(myPtr)
	fmt.Printf(&amp;quot;%T&amp;quot;, newMyPtr)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate an error &amp;ldquo;cannot convert myPtr (type unsafe.Pointer) to type uint32&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;unsafe&amp;quot;
)

func main() {
	type test struct{}
	var myTest = new(test)
	myPtr := unsafe.Pointer(myTest)

	newMyPtr := uint32(uintptr(myPtr))
	fmt.Printf(&amp;quot;%T&amp;quot;, newMyPtr)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works fine.&lt;/p&gt;

&lt;p&gt;Just be carefull when using unsafe package. If not used properly you might end up looking at memory leaks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>using io.LimitReader to read a binary file</title>
      <link>http://localhost:1313/posts/uisng_io_limitreader/</link>
      <pubDate>Sat, 18 Apr 2015 10:42:00 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/uisng_io_limitreader/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Using io.LimitReader in Go&lt;/h1&gt;

&lt;p&gt;I was working on a problem and wanted to read a very specific chunck of file. I read Go documentation and came through &lt;a href=&#34;http://golang.org/pkg/io/#LimitedReader&#34;&gt;io.LimitReader&lt;/a&gt;. According to official documentation, &amp;ldquo;A LimitedReader reads from R but limits the amount of data returned to just N bytes. Each call to Read updates N to reflect the new amount remaining.&amp;rdquo; and this is what I wanted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
f, _ := os.Open(&amp;quot;largefile.bin&amp;quot;)
f.Seek(123, 0)

b := make([]byte, 150-123) // remaining length after seek

f.Read(&amp;amp;b)
f.Close()

buf := bytes.NewBuffer(b) // create buffer with the needed bytes

var a float32
binary.Read(buf, binary.LittleEndian, &amp;amp;a)

binary.Read(io.LimitReader(r, 150-123), binary.LittleEndian, &amp;amp;a)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get operating system name in Go</title>
      <link>http://localhost:1313/posts/get-os-name-in-go/</link>
      <pubDate>Sat, 03 Jan 2015 06:13:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/get-os-name-in-go/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Get operating system name in Go&lt;/h1&gt;

&lt;p&gt;To get the operating system name where we running a Go program, we can use &lt;strong&gt;runtime&lt;/strong&gt; package. &lt;strong&gt;runtime.GOOS&lt;/strong&gt; return the operating system name. Some people try to use &lt;strong&gt;os.Getenv(&amp;ldquo;GOOS&amp;rdquo;)&lt;/strong&gt; but it is not very reliable. I always use &lt;a href=&#34;http://golang.org/pkg/runtime/&#34;&gt;runtime package&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language=go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;runtime&amp;quot;
)

func main() {
	var goos string = runtime.GOOS
	fmt.Printf(&amp;quot;The operating system is: %s\n&amp;quot;, goos)
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Books I read in 2014</title>
      <link>http://localhost:1313/posts/books-in-2014/</link>
      <pubDate>Thu, 01 Jan 2015 07:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/books-in-2014/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Books I read in 2014&lt;/h1&gt;

&lt;p&gt;I read 7 books (and ton of artilcles in &lt;a href=&#34;http://getpocket.com/&#34;&gt;pockets&lt;/a&gt; app) this year.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;img src=&#34;/img/pocket.png&#34; alt=&#34;Pocket app stats&#34; title=&#34;Pocket app&#34; style=&#34;width:500px; height: 300px;&#34;&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Most of the books that I read were technical ranging on different topics. I read couple of physics books such as &lt;a href=&#34;http://www.amazon.com/gp/product/B00DFL353K/&#34;&gt;Hidden In Plain Sight 2: The Equation of the Universe&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.com/The-Particles-Universe-Jeff-Yee-ebook/dp/B007PM4ZZW&#34;&gt;The particles of universe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I read one fiction book &lt;a href=&#34;http://www.amazon.com/Lethal-Code-Lana-Elkins-Thriller-ebook/dp/B00J9P2EMO/&#34;&gt;Lethal Code&lt;/a&gt;, which I didn&amp;rsquo;t like much. It had a great promise but writing could have been better.&lt;/p&gt;

&lt;p&gt;For 2015, I am planning to read at least 15 books and will try to add some variety this time. I want to read some good fiction, non-fiction, science, technology books. I also have a backlog of 4-5 books that I need to finish this year.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BACKLOG&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555&#34;&gt;Thinking Fast And Slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Hooked-How-Build-Habit-Forming-Products-ebook/dp/B00LMGLXTS/&#34;&gt;Hooked: How to Build Habit-Forming Products&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/&#34;&gt;Pragmatic Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Last-Passenger-Manel-Loureiro-ebook/dp/B00KWM7HYI/&#34;&gt;The Last Passenger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Fallow-Season-Hugo-Hunter-ebook/dp/B00JQS1TMK/&#34;&gt;The Fallow Season Of Hugo Hunter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of these books I got from Amazon Prime (Kindle First) and haven&amp;rsquo;t got a chance to read yet.&lt;/p&gt;

&lt;p&gt;I am currently reading 2 books-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Ultimate-Bar-Book-Comprehensive-Cocktails-ebook/
dp/B003IV8GUY/&#34;&gt;The ultimate bar book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Way-Go-Thorough-Introduction-Programming-ebook/dp/B0083RVAJW/&#34;&gt;The Way to Go: A Thorough Introduction to the Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And also tons of articles again in 2015.&lt;/p&gt;

&lt;p&gt;Happy Reading All.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>human&#43;&#43;</title>
      <link>http://localhost:1313/posts/new-human-age/</link>
      <pubDate>Tue, 30 Dec 2014 08:11:15 CST</pubDate>
      
      <guid>http://localhost:1313/posts/new-human-age/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;HUMAN++&lt;/h1&gt;

&lt;p&gt;We all talk about an omnipotent AI that will come some time in future and might kill (hypothetically) its masters (humans in this case). I will love to have intelligent robots but I don&amp;rsquo;t see it happening soon. What I believe will happen before AI take over the world, human++, more intelligent humans. If we look carefully we will see subtle changes and technical breakthroughs that are happening around us and pointing towards a brave new world. Some people call this phenomena &amp;ldquo;Singularity&amp;rdquo; but I call it human++.&lt;/p&gt;

&lt;p&gt;There are many cutting edge research and experiments happening to make this a reality. Some of these are mentioned below and well worth you time to check out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Nano-bots and biological uses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6UVet-OCFdI&amp;amp;utm&#34;&gt;Ray Kurzweil and Robert Freitas discuss the future of nanotechnology&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Human Mind interface&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://research.microsoft.com/en-us/um/people/desney/publications/BCIHCI-Chapter1.pdf&#34;&gt;Microsoft research on brain computer interaction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Exoskeletons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://biomech.media.mit.edu/portfolio_page/load-bearing-exoskeleton-for-augmentation-of-human-running/&#34;&gt;MIT media lab on exoskeleton and their usage in augmenting humans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Fight against aging :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Calico_%28company%29&#34;&gt;Google calico&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the things and others will make humans more intelligent, more resilient to disease and other medical issues, more powerful and may be someday Immortal.&lt;/p&gt;

&lt;p&gt;I am no scientist or philosopher, I am just a mere human who sees the things changing around him and trying to connect the dots. It is not easy to understand what is going on but I am an optimist and believe all these changes will make humans better and might one day make us an inter galactic species.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We all know that AI is good, but you know what is best, more intelligent humans.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with files in go lang</title>
      <link>http://localhost:1313/posts/working-with-files-in-go/</link>
      <pubDate>Sat, 13 Dec 2014 06:40:15 CST</pubDate>
      
      <guid>http://localhost:1313/posts/working-with-files-in-go/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Working with files in go lang&lt;/h1&gt;

&lt;p&gt;Go makes working with file very easy and file reading is an operation that is used very frequently.&lt;/p&gt;

&lt;p&gt;To open a file in Go, we can use &amp;ldquo;Open&amp;rdquo; function from the &amp;ldquo;os&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language=Go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	file, err := os.Open(&amp;quot;test.txt&amp;quot;)
	if err != nil {
		fmt.Println(&amp;quot;erros is: &amp;quot;, err)
		return
	}
	defer file.Close()

	size, err := file.Stat()
	if err != nil {
		fmt.Println(&amp;quot;erros is: &amp;quot;, err)
		return
	}

	fs := make([]byte, size.Size())
	_, err = file.Read(fs)
	if err != nil {
		fmt.Println(&amp;quot;erros is: &amp;quot;, err)
		return
	}

	str := string(fs)
	fmt.Println(str)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I really like how you can simply defer the file close operation just after creating a file object. In Go you use &amp;ldquo;defer&amp;rdquo; to do that. any function that use defer will excute in the end. This way we don&amp;rsquo;t have to worry about forgeting closing the file.&lt;/p&gt;

&lt;p&gt;There is a shorter way to read files too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language=Go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
)

func main() {
	fs, err := ioutil.ReadFile(&amp;quot;test.txt&amp;quot;)
	if err != nil {
		fmt.Println(&amp;quot;Error is: &amp;quot;, err)
	}

	str := string(fs)
	fmt.Println(str)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to create a file instead of reading it, just use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language=Go&#34;&gt;file, err := os.Create(&amp;quot;test.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Go lang boiler plate sublime text snippet</title>
      <link>http://localhost:1313/posts/go-boiler-plate-snippet-sublime-text/</link>
      <pubDate>Sat, 06 Dec 2014 19:07:32 CST</pubDate>
      
      <guid>http://localhost:1313/posts/go-boiler-plate-snippet-sublime-text/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;A sublime Text snippet to auto fill go lang boiler plate&lt;/h1&gt;

&lt;p&gt;If you work with go lang, you know that every time you write a new go program you have to add some lines of go code that is same most of the time. if you are learning and keep creating small scripts then it gets annoying some time. Sublime text provides an option to create snippets and you can use snippets to auto fill some go lang boiler plate.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language=go&#34;&gt;&amp;lt;snippet&amp;gt;
	&amp;lt;content&amp;gt;&amp;lt;![CDATA[
package main

import &amp;quot;fmt&amp;quot;

func main() {
	fmt.Println(&amp;quot;${1:// content...}&amp;quot;)
}
]]&amp;gt;&amp;lt;/content&amp;gt;
	&amp;lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&amp;gt;
	&amp;lt;tabTrigger&amp;gt;fun&amp;lt;/tabTrigger&amp;gt;
	&amp;lt;!-- Optional: Set a scope to limit where the snippet will trigger --&amp;gt;
	&amp;lt;!-- &amp;lt;scope&amp;gt;source.python&amp;lt;/scope&amp;gt; --&amp;gt;
&amp;lt;/snippet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add a snippet in Sublime text, Select Tools-&amp;gt; New Snippet from Menu. It will open a new file
in sublime text, paste the above code and make require changes.&lt;/p&gt;

&lt;p&gt;Save the snippet and you are all set. Next time when you create a new go file just write &amp;ldquo;fun&amp;rdquo; and hit tab, you will have some go lang boiler plate to start with.&lt;/p&gt;

&lt;p&gt;This is just a simple snippet, but you can create other complex snippets such as functions, interfaces etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find Mimimum Value in an array in go</title>
      <link>http://localhost:1313/posts/find-minimum-value-array-go/</link>
      <pubDate>Wed, 26 Nov 2014 06:24:00 CST</pubDate>
      
      <guid>http://localhost:1313/posts/find-minimum-value-array-go/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;How to find a min array value in go lang:&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

func main() {
	x := []int{
		48, 96, 86, 68,
		57, 82, 63, 70,
		37, 34, 83, 27,
		19, 97,  9, 17,
	}

	min:= x[0]

	for _, value := range x {
		if value &amp;lt; min {
			min = value
		}
	}
	fmt.Println(min)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Working with smart people</title>
      <link>http://localhost:1313/posts/working-with-smart-people/</link>
      <pubDate>Tue, 25 Nov 2014 17:52:32 CST</pubDate>
      
      <guid>http://localhost:1313/posts/working-with-smart-people/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Working with samrt people&lt;/h1&gt;

&lt;p&gt;People write a lot about different ways to learn; Books, videos, teachers, and classes etc. But they don&amp;rsquo;t give required recognition to one aspect of learning, that is working with smart and like minded people. It becomes more critical in a corporate environment. If you work with smart people, you learn so many things indirectly that you don&amp;rsquo;t even recognize them.&lt;/p&gt;

&lt;p&gt;Working with smart people help you on many levels, it helps you with your craft and it also helps you taking up new challenges and excel in them.&lt;/p&gt;

&lt;p&gt;I am fortunate to work with many smart people in my current job and every day I learn new things just by discussing things with them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>array and slices in go</title>
      <link>http://localhost:1313/posts/array-and-slices-in-go/</link>
      <pubDate>Sat, 15 Nov 2014 19:58:28 CST</pubDate>
      
      <guid>http://localhost:1313/posts/array-and-slices-in-go/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Array and slices in go lang&lt;/h1&gt;

&lt;p&gt;In &lt;strong&gt;go&lt;/strong&gt; lang, an array looks like this -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var x [5]int&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where x is an array which is composed of 5 ints.&lt;/p&gt;

&lt;p&gt;Same as other c family languages, arrays are indexed starting from zero.&lt;/p&gt;

&lt;p&gt;arrays length is fixed and go provides another type &lt;strong&gt;slices&lt;/strong&gt; to work with this situation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var x []int&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;x is a slice and has a length of 0.&lt;/p&gt;

&lt;p&gt;We can also create a slice using builtin &lt;strong&gt;make&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x := make([]float64, 5, 10)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where 5 is the length and 10 is the capacity of the underlying array.&lt;/p&gt;

&lt;p&gt;If you have programmed in python than there is a way to create slices that look entirely familiar.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;arr := []int{1, 2, 3, 4, 5}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x := arr[0:5]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;x&lt;/strong&gt; is a slice of &lt;strong&gt;arr&lt;/strong&gt; and holds all the values. You can change the values by changing the index in x.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x := arr[1:2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can also omit the &lt;strong&gt;low:high&lt;/strong&gt; from slice.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[0:len(arr)]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[0:]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[:4]&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>learning go</title>
      <link>http://localhost:1313/posts/learning-go/</link>
      <pubDate>Sat, 23 Aug 2014 19:59:32 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/learning-go/</guid>
      <description>&lt;p&gt;Go language has this definition on &lt;a href=&#34;http://http://golang.org/&#34;&gt;golang&lt;/a&gt;:
&amp;gt; Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.&lt;/p&gt;

&lt;p&gt;If you have worked with C family languages (such as C, C++, Java, Python etc.) Go will look familiar to you. I have been working with python from some time and wanted to learn a static typed language. Go is easy to learn and you can start writing code very soon.&lt;/p&gt;

&lt;p&gt;I started with &lt;a href=&#34;http://tour.golang.org/#1&#34;&gt;go language tour&lt;/a&gt; and learned the sytax and semantics of the language. After that I started looking at &lt;a href=&#34;http://golang.org/doc/&#34;&gt;go language documentation&lt;/a&gt;.
One of the best way to learn about a programming language is to look at the code written by other people in that language. So I choose &lt;a href=&#34;https://github.com/docker/docker&#34;&gt;Docker&lt;/a&gt; to read the code.&lt;/p&gt;

&lt;p&gt;This is just the start and I will be writing more about my learnings on go programming.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>